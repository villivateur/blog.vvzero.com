<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三帛的世界</title>
  
  <subtitle>三帛的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.vvzero.com/"/>
  <updated>2022-05-31T12:58:15.907Z</updated>
  <id>https://blog.vvzero.com/</id>
  
  <author>
    <name>冯锦瑾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FreeBSD vs Linux：哪个开源操作系统更强大</title>
    <link href="https://blog.vvzero.com/2022/05/25/freebsd-vs-linux-which-open-source-os-is-superior/"/>
    <id>https://blog.vvzero.com/2022/05/25/freebsd-vs-linux-which-open-source-os-is-superior/</id>
    <published>2022-05-25T12:50:12.000Z</published>
    <updated>2022-05-31T12:58:15.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是“攻玉计划”的一部分，翻译自 <a href="https://www.ateamsystems.com/tech-blog/freebsd-vs-linux-which-open-source-os-is-superior/">https://www.ateamsystems.com/tech-blog/freebsd-vs-linux-which-open-source-os-is-superior/</a></p></blockquote><p>FreeBSD 和 Linux，哪一个更强大？这个问题没那么简单。它们各有春秋，不能一概而论。</p><p>来自我们 A-Team Systems 的专家们有数十年这两个系统的使用经验，所以，我们将详细阐述这两个系统的优势和劣势，供你选择最适合的系统。</p><h2 id="FreeBSD-vs-Linux：功能对比"><a href="#FreeBSD-vs-Linux：功能对比" class="headerlink" title="FreeBSD vs Linux：功能对比"></a>FreeBSD vs Linux：功能对比</h2><p>让我们比较一下这两个 Unix 系统的关键几个方面：</p><h3 id="操作系统完整性"><a href="#操作系统完整性" class="headerlink" title="操作系统完整性"></a>操作系统完整性</h3><p>在这一点上，<a href="https://www.ateamsystems.com/tech-blog/intro-to-freebsd-learn-what-it-is-and-how-it-works/">FreeBSD</a> 更有优势。<br>这是因为 Linux 实际上并不是一个完整的操作系统，而只是一个内核。这是一个很常见的误解，因为很多用户经常把 Linux 看成是一个完整的操作系统。<br>各个 Linux 发行版通常会将必需的软件和库文件打包进系统，这些软件和库文件大多来自 GNU 项目，所以自由软件基金会才将 Linux 称作“GNU/Linux”。</p><p>以下是一些流行的 Linux 发行版：</p><ul><li>Ubuntu</li><li>CentOS</li><li>Fedora</li><li>Arch Linux</li><li>Linux Mint</li><li>Debian</li></ul><h3 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h3><p>关于价格，二者不分胜负。因为作为开源软件，FreeBSD 和 Linux 自然都是免费的。</p><blockquote><p>译者按：在译者看来，开源并不一定意味着免费，很多开源许可证并不允许商用。当然，Linux 和 FreeBSD 是允许免费商用的。</p></blockquote><p>你可能需要为某些额外功能付费，比如服务支持、硬件等。</p><p>任何人都可以免费使用、修改、分发、查阅 Linux 及 FreeBSD 的源代码。但是，任何对 Linux 所作的修改都必须公开源码。<br>而 FreeBSD 并不需要公开，因此，需要在产品中使用相关源码的公司，在这一点上可能更倾向于使用 FreeBSD。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>FreeBSD 比 Linux 略微更安全一点。FreeBSD 项目的核心支柱之一就是安全性，并且预先安装了顶级的安全功能，所以在这一点上，毫无疑问它更有优势。</p><p>但这也并不意味着 Linux 不安全。Linux 是高度可配置的，因此可以实现你想要的任何安全特性。但是从操作系统整体角度来看，FreeBSD 的安全性更高。</p><h3 id="硬件与架构支持"><a href="#硬件与架构支持" class="headerlink" title="硬件与架构支持"></a>硬件与架构支持</h3><p>如果比较硬件与架构支持度的话，Linux 绝对是占优势的。Linux 可以在许多不同的平台上运行，但是 FreeBSD 不行。所以，如果你很在乎兼容性和跨平台性，请选择 Linux。</p><p>但这也是一把双刃剑，为了能在大量不同的平台上运行，Linux 必须牺牲一部分性能以换取兼容性。而另一方面，FreeBSD 无需牺牲性能，因为它只需要在有限数量的平台上运行即可。</p><p>由于 Linux 是一个主流的系统，而 FreeBSD 不是，所以设备制造商更倾向于制造兼容 Linux 的软硬件。举个例子，如果你需要经常更新显卡驱动，Linux 会比 FreeBSD 更快获取相关更新支持。</p><p>FreeBSD 对硬件支持的短板大多集中在外设和显卡这种桌面级应用方面。但 FreeBSD 的目标场景是服务器应用，所以这并没有多大影响。</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>Linux 和 FreeBSD 都相当稳定可靠。但如果必须得比个高下的话，FreeBSD 会更稳定一点。这又回到了一个事实：FreeBSD 更有组织性。Linux 的稳定性可能会被用户使用的额外组件而拖累。而与此同时，FreeBSD 是一个完整的操作系统，所以它的默认配置更加可靠。总而言之，二者都不缺乏稳定性。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>虽然业界没有确凿的证据证明 FreeBSD 比 Linux 的性能更优，但是大多数用过二者的用户都说 FreeBSD 在这方面更强一点。这同样归咎于 Linux 的高兼容性。FreeBSD 更精简，无需对环境做额外的判断，因此通常来说它的性能更好。</p><p>FreeBSD 的延迟比 Linux 更低。这里延迟指的是系统时钟中断发生后，到处理器开始运行代码的这段时间。但是大多数应用在 Linux 上跑得更快。</p><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p>FreeBSD 使用了它自己的 BSD 许可证。该许可证允许用户免费使用该操作系统，并随意修改源码。如果愿意的话，用户也可以发布修改后的源码，或者直接闭源，BSD 许可证允许他们这么做。</p><p>Linux 使用的是 GNU GPL 许可证（GNU通用公共许可协议）。用户可在遵循该许可证限制的情况下随意修改源码。主要区别是，如果你对 Linux 源码作了修改，那么法律意义上你<strong>必须</strong>公开你的代码。</p><blockquote><p>译者按：译者认为这是片面的，如果你修改代码并仅供自己研究使用，那么不需要公开代码。你只需要把源码公开给用户即可。</p></blockquote><p>这个许可证既有好处也有坏处，最大的劣势就是，用户不能用 Linux 开发闭源的系统。而优势是，所有用户都可互相贡献代码，推动整个项目前进。这也是 Linux 能有这么大社区的原因。</p><p>大多数用户无需关心本节的区别，因为大多数人根本不会修改源码。但如果你想使用一个开源的系统来开发闭源的系统，请选择 FreeBSD 而不是 Linux。</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><p>从用户角度，大多数人可能认为 Linux 默认的 BASH 比 FreeBSD 的 tcsh 更强大，因为 tcsh 太落伍了。BASH 非常灵活，用户几乎可以在任何 Unix 兼容的系统上做任何事。但这也并不意味着 tcsh 一无是处，tcsh 只是学习路线更陡峭而已。当然，在 FreeBSD 上安装 BASH 也很简单。</p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>这一方面，二者也是平手。Linux 和 FreeBSD 都采用了非常高效的文件系统。</p><p>FreeBSD 默认使用 ZFS（泽字节文件系统），这绝对是长期存储数据的最佳文件系统之一。它内置了一个磁盘卷管理器，因此允许用户在同一个存储池上创建多个文件系统。因此在发生物理故障、操作失误或者数据损坏的情况下，仍能保证数据一定的可靠性。</p><p>ext4 是大多数 Linux 发行版的默认文件系统。它不如 ZFS 那么灵活，但相当可靠。</p><h3 id="制造商支持"><a href="#制造商支持" class="headerlink" title="制造商支持"></a>制造商支持</h3><p>这一轮 Linux 获胜。IBM、戴尔和惠普的服务器都直接支持运行 Linux。FreeBSD 也能在这些服务器上运行，并且有 A-Team Systems 团队可提供支持。你可以查阅 FreeBSD 的 <a href="https://www.freebsd.org/commercial/hardware/">硬件制造商</a> 以了解当前所支持的硬件。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>当考虑更新时，你需要关注两方面：更新的便捷度以及更新发布是否及时。</p><p>在便捷度方面，FreeBSD 更胜一筹。用户可以依其意愿选择更新某些组件，比如，你可以只更新某些核心组件，比如内核、源码等，或者只更新它们的子组件。当然也可以全部更新，操作非常简单。</p><p>而对于更新的及时度，Linux 表现得更好。开源公司通常有很强的动力去更新，因此，只要有需求，更新很快就能发布。FreeBSD 可能需要花更长的时间去开发、发布更新，但事实上，Linux 和 FreeBSD 经常可以同时获取相关更新，因为他们使用了同样的上游项目。</p><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>在 FreeBSD 上安装软件包很简单。FreeBSD Ports 项目包含了将近 40000 个软件源，用户或管理员可以方便快捷地安装它们。每个软件源都有针对用户实际系统的相关补丁，以确保软件能在特定平台上正常运行。</p><p>而不同 Linux 发行版的包管理工具就参差不齐了，有些非常棒，有些就很一般。以下是一些做得比较好的包管理工具：</p><ul><li>DPKG - Debian</li><li>RPM - Red Hat</li><li>Pacman Package Manager</li><li>Pkgsrc</li><li>Portage</li></ul><h3 id="开发维护人员"><a href="#开发维护人员" class="headerlink" title="开发维护人员"></a>开发维护人员</h3><p>FreeBSD 核心团队有 9 名成员，并在世界范围内有大约 500 名代码贡献者。这个团队负责调试、开发并优化主线代码仓库。大多数贡献者都是不求回报的志愿者，核心团队成员由所有活跃的贡献者每两年一次投票选出。</p><p>而 Linux 内核由 Linus Torvals 先生管理维护，他也是 Linux 的缔造者。Linus 先生对 Linux 的新功能拥有最终决定权。</p><h2 id="FreeBSD-与-Linux-到底如何不同？"><a href="#FreeBSD-与-Linux-到底如何不同？" class="headerlink" title="FreeBSD 与 Linux 到底如何不同？"></a>FreeBSD 与 Linux 到底如何不同？</h2><p>FreeBSD 是一个完整的操作系统，拥有内核、驱动、文档以及各种工具。Linux 只有内核以及部分驱动，并且依赖第三方系统软件才能运行。FreeBSD 的源码使用 BSD 许可证，而 Linux 使用 GPL 许可证。</p><p>Linux 广泛支持各种硬件，而 FreeBSD 支持的硬件非常有限。Linux 也是当前市场上最流行的开源操作系统，所以不缺各种支持。FreeBSD 也有非常忠实的用户群，但远不能与 Linux 的用户群相提并论。</p><h2 id="FreeBSD-比-Linux-更安全吗？"><a href="#FreeBSD-比-Linux-更安全吗？" class="headerlink" title="FreeBSD 比 Linux 更安全吗？"></a>FreeBSD 比 Linux 更安全吗？</h2><p>FreeBSD 的安全问题通常比 Linux 更少，但是差距并不大。Linux 的用户比 FreeBSD 更多，所以也会发现更多的漏洞。由于 FreeBSD 提供了完整的操作系统，所以其默认配置非常安全。</p><p>Linux 系统的安全性取决于用户的配置。由于其高度的可定制化，Linux 用户可以让他们的系统变得几乎牢不可破。</p><h2 id="FreeBSD-可以运行-Linux-的程序吗？"><a href="#FreeBSD-可以运行-Linux-的程序吗？" class="headerlink" title="FreeBSD 可以运行 Linux 的程序吗？"></a>FreeBSD 可以运行 Linux 的程序吗？</h2><p>FreeBSD 提供了与 Linux 的 <a href="https://docs.freebsd.org/en/books/handbook/linuxemu/">二进制兼容性</a>。这允许用户在 FreeBSD 系统上安装并运行 Linux 的二进制程序。FreeBSD 上默认没有安装 Linux 的相关库文件，但可以从 FreeBSD Ports 上安装，或者手动安装。</p><h2 id="为什么-Linux-比-FreeBSD-更流行？"><a href="#为什么-Linux-比-FreeBSD-更流行？" class="headerlink" title="为什么 Linux 比 FreeBSD 更流行？"></a>为什么 Linux 比 FreeBSD 更流行？</h2><p>这其中有多个原因。一方面，FreeBSD 缺乏硬件支持，这就限制了用户使用它的场景。</p><p>另一个原因是 FreeBSD 缺乏商业支持。有如 Red Hat 这样的大公司能确保 Linux 及时获取更新支持，但对于 FreeBSD 而言这是不可能的。</p><p>最后，Linux 拥有数量众多的软件，允许其发挥最大的灵活性和可用性。FreeBSD 提供了一些预编译的软件包，但仍无法与 Linux 相比。</p><h2 id="FreeBSD-和-Linux-哪个用起来更简单？"><a href="#FreeBSD-和-Linux-哪个用起来更简单？" class="headerlink" title="FreeBSD 和 Linux 哪个用起来更简单？"></a>FreeBSD 和 Linux 哪个用起来更简单？</h2><p>FreeBSD 和 Linux 都需要一定的学习成本。但是，FreeBSD 相对而言更易学习使用，因为它没有那么多学习选项，例如发行版、包管理工具等等。</p><p>大多数开发者认为，比起 FreeBSD，Linux 太混乱了。对于同一个任务有无数种实现方案，并且不同的用户对应该如何选择方案有不同（且强烈）的意见。Linux 社区是一个快节奏的社区，经常经历变化。因此，很多用户更喜欢 FreeBSD 社区的一致性和条理性。</p><h2 id="哪个更快？"><a href="#哪个更快？" class="headerlink" title="哪个更快？"></a>哪个更快？</h2><p>总的来说，FreeBSD 通常比 Linux 更快。这主要是因为它是一个完整的系统。此外，FreeBSD 的延迟比 Linux 低，也就意味着它能更快处理输入。有如网飞、苹果和思科之类的公司会采用 FreeBSD 以获取这种处理速度优势。</p><p>Linux 也能获得类似的速度，但是，这取决于你的配置。还值得注意的是，大多数应用程序在 Linux 上运行得更快。因此大多数超级计算机会使用 Linux 而不是 FreeBSD。</p><h2 id="FreeBSD-vs-Linux：哪一个最适合你？"><a href="#FreeBSD-vs-Linux：哪一个最适合你？" class="headerlink" title="FreeBSD vs Linux：哪一个最适合你？"></a>FreeBSD vs Linux：哪一个最适合你？</h2><p>FreeBSD 和 Linux 都可作为开源用户的选择。最主要的区别就是，FreeBSD 更完整，更标准化，而 Linux 只提供了内核及驱动，需要第三方软件支持。</p><p>如果想要尽可能少地配置系统，FreeBSD 是更好的选择。但是，Linux 提供了更多的自定义选项，对于想要定制系统的人是个更好的选择。另外，如果你有硬件平台限制的话，Linux 的支持性可能更好点。</p><p>如果你喜欢紧跟技术潮流，Linux 的新技术、新特性和更新速度肯定会让你满意。如果稳定性、性能和安全性对你来说更重要，FreeBSD 也许更适合你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文是“攻玉计划”的一部分，翻译自 &lt;a href=&quot;https://www.ateamsystems.com/tech-blog/freebsd-vs-linux-which-open-source-os-is-superior/&quot;&gt;https:
      
    
    </summary>
    
      <category term="攻玉计划" scheme="https://blog.vvzero.com/categories/%E6%94%BB%E7%8E%89%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="FreeBSD" scheme="https://blog.vvzero.com/tags/FreeBSD/"/>
    
      <category term="Linux" scheme="https://blog.vvzero.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Markdown 中修改字体颜色</title>
    <link href="https://blog.vvzero.com/2022/05/06/How-to-apply-color-in-Markdown/"/>
    <id>https://blog.vvzero.com/2022/05/06/How-to-apply-color-in-Markdown/</id>
    <published>2022-05-06T12:21:48.000Z</published>
    <updated>2022-05-08T04:01:10.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是“攻玉计划”的一部分，翻译自 <a href="https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown">https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown</a></p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我想用 Markdown 记录文字信息，但我搜了一圈 Google，发现 Markdown 不支持修改字体颜色。而且 StackOverflow 和 GitHub 的 Markdown 编辑模式也不支持指定文字颜色。</p><p>有什么办法可以在 Markdown 里指定文字颜色吗？</p><h2 id="最佳答案"><a href="#最佳答案" class="headerlink" title="最佳答案"></a>最佳答案</h2><p><strong>太长不看系列：</strong></p><p>Markdown 自身并不支持色彩配置，但你可以在 Markdown 中添加 HTML 代码，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>这是**蓝色**的文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>以下是长回答：</strong></p><p>根据官方的 <a href="http://daringfireball.net/projects/markdown/syntax#html">语法规则</a>：</p><blockquote><p>Markdown 只有一个用途，就是作为编写网页的一种语法格式。<br>Markdown 不能取代 HTML，甚至不能实现 HTML 的大部分功能。它的语法很简单，只能覆盖很小一部分的 HTML 标签。Markdown 并不是为了让你更方便地插入 HTML 标签。我的观点是，HTML 标签已经很方便了，而 Markdown 是为了让人更容易读、写、改。HTML 是用于发布的格式，而 Markdown 是给人写的格式。因此，<strong>Markdown的语法格式只用来处理可以用纯文本表达的信息。</strong><br>对于任何 Markdown 未实现的功能，直接插入 HTML 代码即可。</p></blockquote><p>由于 Markdown 并不是用来发布的格式，修改字体的颜色已经超出了 Markdown 的处理范围。但你仍可以插入裸的 HTML 代码（因为 HTML 是发布级的格式），例如以下 Markdown 文本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包含 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>*蓝色* 文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的 Markdown 语句。</span><br></pre></td></tr></table></figure><p>将会转换为以下 HTML 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>包含 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">em</span>&gt;</span> 文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的 Markdown 语句。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前，StackOverflow （也许 GitHub 也是）会把 HTML 代码原原本本地显示出来（因为安全性考虑），因此你无法在这些地方实现文字颜色的功能，但你可以在 Markdown 的任何标准实现中使用。</p><p>另一种解决方案是，直接使用 <a href="http://maruku.rubyforge.org/proposal.html#attribute_lists">Markuru</a> 的非标准属性表。此标准后续被 <a href="https://pythonhosted.org/Markdown/extensions/attr_list.html">其它</a> <a href="https://pythonhosted.org/Markdown/extensions/attr_list.html">一些人</a>（可能还有其他类似理念的方案，比如 <a href="http://pandoc.org/MANUAL.html#divs-and-spans">pandoc 中的 div 和 span 参数</a>）继承开发。如果用了这种方案，你就可以为一段文字或者行内元素配置一个类，然后用 CSS 给这个类定义色彩属性。但显然，你必须使用支持这些非标准方案的编辑工具，并且这样写出来的文档也没法移植到其他系统上。</p><h2 id="其他回答-1"><a href="#其他回答-1" class="headerlink" title="其他回答 1"></a>其他回答 1</h2><p>如果你不想嵌入 HTML，只想用纯净的 Markdown 语句，可以尝试添加 emoji 以便强调指定语句。比如：⚠️警告⚠️，🔴重要❗🔴 或者 🔥新功能🔥。</p><h2 id="其他回答-2"><a href="#其他回答-2" class="headerlink" title="其他回答 2"></a>其他回答 2</h2><p>尽管 Markdown 不支持文字颜色属性，但你可以用 CSS 重定义一些格式标签，以便用它们来修改文字颜色。当然，你可以选择是否保留这些格式标签的原有属性。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 重置标签属性</span><br><span class="line">s &#123; <span class="attribute">text-decoration</span>: none; &#125; // 删除线</span><br><span class="line"><span class="selector-tag">em</span> &#123; <span class="attribute">font-style</span>: normal; <span class="attribute">font-weight</span>: bold; &#125; // 斜体</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 增加颜色属性</span><br><span class="line">s &#123; <span class="attribute">color</span>: green &#125;</span><br><span class="line"><span class="selector-tag">em</span> &#123; <span class="attribute">color</span>: blue &#125;</span><br></pre></td></tr></table></figure><p>参见 <a href="https://stackoverflow.com/questions/25535836/how-to-restyle-em-tag-to-be-bold-instead-of-italic">如何使 em 标签标记粗体而不是斜体</a>。</p><p>然后，在 Markdown 文本中这样使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~这是绿色~~</span><br><span class="line">_这是蓝色_</span><br></pre></td></tr></table></figure><h2 id="其他回答-3"><a href="#其他回答-3" class="headerlink" title="其他回答 3"></a>其他回答 3</h2><p>可以换个思路，你可以用各种颜色的 Unicode 字符以满足相关需求，比如 🔴，U+1F534（大红圈）。</p><p>举个例子，在我 GitHub 里的硬件项目中，我会用以下的字符以注明接线的颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">🔴 红色: +5V</span><br><span class="line">🟠 橙色: +3.3V</span><br><span class="line">⚫ 黑色: GND</span><br><span class="line">⚪ 白色: GND (拉低)</span><br><span class="line">🟣 紫色: I2C 信号线</span><br><span class="line">🟢 绿色: 时钟信号</span><br><span class="line">🟡 黄色: WS2812 信号</span><br><span class="line">🔵 蓝色: 电阻桥（模拟）输入</span><br></pre></td></tr></table></figure><p>这也许能帮到你，你可以直接复制粘贴上述字符到你的文档中，或者直接在网上搜例如“Unicode 紫色方块”之类。当然，它们也叫做 emoji。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文是“攻玉计划”的一部分，翻译自 &lt;a href=&quot;https://stackoverflow.com/questions/35465557/how-to-apply-color-in-markdown&quot;&gt;https://stackoverflo
      
    
    </summary>
    
      <category term="攻玉计划" scheme="https://blog.vvzero.com/categories/%E6%94%BB%E7%8E%89%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="Markdown" scheme="https://blog.vvzero.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>如何在 ESP8266 上选用合适的引脚</title>
    <link href="https://blog.vvzero.com/2022/05/05/esp8266-pinout-reference-gpios/"/>
    <id>https://blog.vvzero.com/2022/05/05/esp8266-pinout-reference-gpios/</id>
    <published>2022-05-05T10:40:55.000Z</published>
    <updated>2022-05-05T12:16:34.631Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是“攻玉计划”的一部分，翻译自 <a href="https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/">https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/</a></p></blockquote><p>本文旨在介绍 ESP8266 的引脚定义、引脚功能及如何使用它们。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/1.png"></p><p>ESP-12E 模块拥有 17 个 GPIO 引脚。但在各个开发板上，ESP8266 芯片的 GPIO 引脚并不一定全部引出，而且某些引脚不建议使用，某些引脚有非常特殊的功能。</p><p>本文将指导你如何正确使用 ESP8266 的各个 GPIO，避免用错引脚而浪费时间。</p><h2 id="ESP12-E-模块引脚定义"><a href="#ESP12-E-模块引脚定义" class="headerlink" title="ESP12-E 模块引脚定义"></a>ESP12-E 模块引脚定义</h2><p>下图阐述了 ESP-12E 模块的引脚定义。当你的项目使用裸 ESP-12E/F 模块的时候，可以参考此图。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/2.png"></p><blockquote><p>🔵注意：某些开发板可能不能使用全部的引脚，但相同的引脚在不同的开发板上，功能肯定是一样的。</p></blockquote><p>当前市场上有很多不同的 ESP8266 模块/开发板，它们的形状、大小、可用 GPIO 数目各不相同。但最常用的是 ESP-01(S)、ESP-12E/F、NodeMCU 开发板以及 Wemos D1 Mini 开发板。你可以自己搜索这些开发板模块的区别。</p><h2 id="ESP-01-S-引脚定义"><a href="#ESP-01-S-引脚定义" class="headerlink" title="ESP-01(S) 引脚定义"></a>ESP-01(S) 引脚定义</h2><p>如果你在用 ESP-01(S) 的板子，可以参考下图的 GPIO 引脚定义。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/3.png"></p><h2 id="ESP-12E-NodeMCU-开发板"><a href="#ESP-12E-NodeMCU-开发板" class="headerlink" title="ESP-12E NodeMCU 开发板"></a>ESP-12E NodeMCU 开发板</h2><p>ESP-12E NodeMCU 开发板的引脚定义如下图所示。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/4.png"></p><h2 id="Wemos-D1-Mini-开发板"><a href="#Wemos-D1-Mini-开发板" class="headerlink" title="Wemos D1 Mini 开发板"></a>Wemos D1 Mini 开发板</h2><p>Wemos D1 Mini 开发板的引脚定义如下图所示。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/5.png"></p><h2 id="ESP8266-的外设"><a href="#ESP8266-的外设" class="headerlink" title="ESP8266 的外设"></a>ESP8266 的外设</h2><p>ESP8266 的外设包括：</p><ul><li>17 个 GPIO</li><li>SPI</li><li>I2C（软件实现）</li><li>I2S（支持 DMA）</li><li>UART</li><li>10 位 ADC</li></ul><h2 id="推荐使用的引脚"><a href="#推荐使用的引脚" class="headerlink" title="推荐使用的引脚"></a>推荐使用的引脚</h2><p>需要注意的一点是，ESP8266 开发板上丝印的引脚号，并不是芯片真正的 GPIO 编号。比如，D0 是 GPIO16，D1 是 GPIO5。</p><p>下表说明了 ESP8266 开发板上丝印的引脚号与实际 GPIO 编号的对应关系，并提醒你哪些引脚在使用时需要注意。</p><p>绿色标记的引脚可以随意使用；黄色标记的引脚可以使用，但需要注意它们在芯片启动时的影响，可能带来意外的问题。红色标记的引脚不建议用作输入或输出功能。</p><table><thead><tr><th>丝印标签</th><th>GPIO</th><th>可作为输入</th><th>可作为输出</th><th>备注</th></tr></thead><tbody><tr><td>D0</td><td>GPIO16</td><td>不可用于中断</td><td>不可用于 PWM 或 I2C</td><td>🟠启动时为高电平<br>用于从深度睡眠中唤醒</td></tr><tr><td>D1</td><td>GPIO5</td><td>🟢是</td><td>🟢是</td><td>通常用作 <strong>SCL</strong> (I2C)</td></tr><tr><td>D2</td><td>GPIO4</td><td>🟢是</td><td>🟢是</td><td>通常用作 <strong>SDA</strong> (I2C)</td></tr><tr><td>D3</td><td>GPIO0</td><td>已被上拉</td><td>🟢是</td><td>与 FLASH 按键连接，如果拉低则会启动失败</td></tr><tr><td>D4</td><td>GPIO2</td><td>已被上拉</td><td>🟢是</td><td>🟠启动时为高电平<br>连接板载 LED，如果拉低则会启动失败</td></tr><tr><td>D5</td><td>GPIO14</td><td>🟢是</td><td>🟢是</td><td><strong>SPI</strong> (SCLK)</td></tr><tr><td>D6</td><td>GPIO12</td><td>🟢是</td><td>🟢是</td><td><strong>SPI</strong> (MISO)</td></tr><tr><td>D7</td><td>GPIO13</td><td>🟢是</td><td>🟢是</td><td><strong>SPI</strong> (MOSI)</td></tr><tr><td>D8</td><td>GPIO15</td><td>已被下拉至 GND</td><td>🟡是</td><td><strong>SPI</strong> (CS)<br>如果拉高则会启动失败</td></tr><tr><td>RX</td><td>GPIO3</td><td>🟡是</td><td>🔴RX 引脚</td><td>🟠启动时为高电平</td></tr><tr><td>TX</td><td>GPIO1</td><td>🔴TX 引脚</td><td>🟡是</td><td>🟠启动时为高电平<br>启动时的调试输出引脚，如果拉低会启动失败</td></tr><tr><td>A0</td><td>ADC0</td><td>🟢模拟输入</td><td>🔴禁用</td><td></td></tr></tbody></table><p>接下来的篇幅将更详细地介绍 ESP8266 GPIO 引脚的功能。</p><h3 id="连接-FLASH-芯片的引脚"><a href="#连接-FLASH-芯片的引脚" class="headerlink" title="连接 FLASH 芯片的引脚"></a>连接 FLASH 芯片的引脚</h3><p>GPIO6 到 GPIO11 通常用于连接 FLASH 芯片，所以，不推荐使用这几个引脚。</p><h3 id="启动过程中用到的引脚"><a href="#启动过程中用到的引脚" class="headerlink" title="启动过程中用到的引脚"></a>启动过程中用到的引脚</h3><p>如果某些引脚被拉高或者拉低，ESP8266 可能会启动失败。下表是部分引脚在启动时的状态：</p><ul><li><strong>GPIO16</strong>：启动时为高电平</li><li><strong>GPIO0</strong>：如果被拉低，则启动失败</li><li><strong>GPIO2</strong>：启动时为高电平，如果被拉低，则启动失败</li><li><strong>GPIO15</strong>：如果被拉高，则启动失败</li><li><strong>GPIO3</strong>：启动时为高电平</li><li><strong>GPIO1</strong>：启动时为高电平，如果被拉低，则启动失败</li><li><strong>GPIO10</strong>：启动时为高电平</li><li><strong>GPIO9</strong>：启动时为高电平</li></ul><h3 id="启动时为高电平的引脚"><a href="#启动时为高电平的引脚" class="headerlink" title="启动时为高电平的引脚"></a>启动时为高电平的引脚</h3><p>以下引脚在启动时会输出 3.3V 的高电平。如果你在这些引脚上接了继电器之类的外设，可能会带来一些问题：</p><ul><li>GPIO16</li><li>GPIO3</li><li>GPIO1</li><li>GPIO10</li><li>GPIO9</li></ul><p>此外，其他引脚（除了 GPIO5 和 GPIO4），在启动时会输出低电平信号，同样可能带来问题。你可以阅读 <a href="https://rabbithole.wwwdotorg.org/2017/03/28/esp8266-gpio.html">此文章</a> 以详细了解各个 GPIO 在启动时的状态。</p><blockquote><p>🟢如果需要控制继电器或功率管，GPIO4 和 GPIO5 是最安全的引脚。</p></blockquote><h3 id="模拟输入引脚"><a href="#模拟输入引脚" class="headerlink" title="模拟输入引脚"></a>模拟输入引脚</h3><p>ESP8266 只有一个引脚支持模拟输入，此引脚叫 ADC0，丝印上常标记为 A0。</p><p>如果使用 ESP8266 裸芯片（ESP-12E/F）的话，此引脚的电压输入范围为 0-1V。如果使用了 NodeMCU 之类的开发板，那么电压输入范围就是 0-3.3V，因为开发板上已经集成了分压器。</p><h3 id="板载-LED"><a href="#板载-LED" class="headerlink" title="板载 LED"></a>板载 LED</h3><p>大多数 ESP8266 模块均有一个内置的 LED，通常连在 GPIO2 上。LED 亮灭的逻辑是反向的，GPIO2 为高电平时，LED 熄灭；GPIO2 低电平时，LED 亮起。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/6.png"></p><h3 id="复位引脚"><a href="#复位引脚" class="headerlink" title="复位引脚"></a>复位引脚</h3><p>当 RST 引脚被拉低时，ESP8266 将被复位。按开发板上的 RESET 按键同理。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/7.png"></p><h3 id="GPIO0"><a href="#GPIO0" class="headerlink" title="GPIO0"></a>GPIO0</h3><p>当 GPIO0 被拉低时，复位 ESP8266，芯片将进入 bootloader 模式。按开发板上的 FLASH/BOOT 按钮同理。</p><p><img src="https://img.vvzero.com/blog/esp8266-pinout-reference-gpios/8.png"></p><h3 id="GPIO16"><a href="#GPIO16" class="headerlink" title="GPIO16"></a>GPIO16</h3><p>GPIO16 可被用于从深度睡眠中唤醒 ESP8266。要实现此功能，需要将 GPIO16 连接在 RST 引脚上。关于如何实现深度睡眠，请搜索并参考 Arduino 官网上的相关案例。</p><h3 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h3><p>ESP8266 没有硬件 I2C 引脚，但可以用软件模拟，所以你可以使用任意引脚实现 I2C。通常我们会使用以下引脚：</p><ul><li><strong>GPIO5</strong>：SCL</li><li><strong>GPIO4</strong>：SDA</li></ul><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>ESP8266 上的 SPI 引脚如下：</p><ul><li><strong>GPIO12</strong>：MISO</li><li><strong>GPIO13</strong>：MOSI</li><li><strong>GPIO14</strong>：SCLK</li><li><strong>GPIO15</strong>：CS</li></ul><h3 id="PWM-引脚"><a href="#PWM-引脚" class="headerlink" title="PWM 引脚"></a>PWM 引脚</h3><p>我们可以在 ESP8266 的所有引脚（GPIO0 至 GPIO15）上软件实现 PWM 功能。ESP8266 上的 PWM 有 10 位精度。关于如何实现 PWM 功能，请搜索并参考 Arduino 官网上的相关案例。</p><h3 id="中断引脚"><a href="#中断引脚" class="headerlink" title="中断引脚"></a>中断引脚</h3><p>ESP8266 的所有 GPIO 引脚均支持中断，除了 GPIO16。相关案例请搜索并参考 Arduino 官网上的相关案例。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望本文能解决你对 ESP8266 GPIO 的相关疑惑，祝好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文是“攻玉计划”的一部分，翻译自 &lt;a href=&quot;https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/&quot;&gt;https://randomnerdtutorials.com/
      
    
    </summary>
    
      <category term="攻玉计划" scheme="https://blog.vvzero.com/categories/%E6%94%BB%E7%8E%89%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="Arduino" scheme="https://blog.vvzero.com/tags/Arduino/"/>
    
      <category term="esp8266" scheme="https://blog.vvzero.com/tags/esp8266/"/>
    
  </entry>
  
  <entry>
    <title>如何 DIY 一个苏康码与行程码“双码合一”的健康码 APP</title>
    <link href="https://blog.vvzero.com/2022/04/08/diy-to-combine-sukangma-and-xingchengma/"/>
    <id>https://blog.vvzero.com/2022/04/08/diy-to-combine-sukangma-and-xingchengma/</id>
    <published>2022-04-08T01:56:04.000Z</published>
    <updated>2022-04-08T13:00:02.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>众所周知的背景：</p><ol><li>苏康码打开很慢，在支付宝中如果没有快捷键，需要以下步骤：点击打开支付宝 -&gt; 点击健康码 -&gt; 点击立即查看，如果设置了长按图标打开健康码，也得至少两步；其他 APP 比如“苏周到”，可以实现长按快捷键后一步访问，但是其中存在三个步骤：APP 启动 -&gt; 健康码小程序启动 -&gt; 加载网页，这种不可理喻的框架，在某些低端机上冷启动，可能需要长达数十秒的时间；</li><li>行程卡打开也很慢，在微信小程序中打开，不知道为什么每次都让我确认一下“同意并授权运营商查询”，严重影响效率；</li><li>很多地方两个码都要查，于是慢*2，话说我也不知道为什么有关部门不把这两个码合二为一……</li></ol><p>所以干脆 DIY 一个。</p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p>我想做出这样的效果：打开 APP 后，直接显示苏康码，滑动屏幕可切换到行程码，不需要任何多余的点击动作。</p><h3 id="技术栈选择"><a href="#技术栈选择" class="headerlink" title="技术栈选择"></a>技术栈选择</h3><p>我没有任何 APP 开发经验，所以相当于新手。因为最近用 C# 和 .NET 框架比较多，<a href="https://v2ex.com/t/844404">经 V2EX 网友提醒</a>，我选择了 Xamarin 框架。据说如果新手想快速尝试跨平台 APP 开发，用 flutter 比较好，但是……whatever，支持一下微软，及其宇宙第一 IDE。</p><h3 id="获取苏康码直链"><a href="#获取苏康码直链" class="headerlink" title="获取苏康码直链"></a>获取苏康码直链</h3><p>既然苏康码本质上是网页，而且我在朋友圈了解到，可以获取到直链而且是不需要认证的，只要 token 对就行了，那就简单了。</p><p>于是我决定使用 <a href="https://www.telerik.com/fiddler/fiddler-classic">Fiddler</a> 抓包，大致步骤就是：配好 Fiddler 的监听端口，然后保证电脑和手机在同一个局域网内，手机在 WiFi 设置里配置好 Fiddler 的代理。</p><p><img src="https://img.vvzero.com/blog/diy-to-combine-sukangma-and-xingchengma/1.png"></p><p>测试的 APP 是苏周到，不出所料，苏康码链接是 HTTPS 的，想解密只能在手机上安装一个证书然后中间人了。</p><p><img src="https://img.vvzero.com/blog/diy-to-combine-sukangma-and-xingchengma/2.png"></p><p>导出 Fiddler 的证书并复制到手机上，MIUI 安装证书的步骤也很简单，记得在抓完包之后删除这个证书就好。</p><p><img src="https://img.vvzero.com/blog/diy-to-combine-sukangma-and-xingchengma/3.png"></p><p>然后就可以解密 HTTPS 流量。理论上，对于现在的 Android 版本，APP 可以选择不信任用户安装的证书，但还好，苏康码并没有采取这样的机制。</p><p>解析出来的苏康码的直链很简单，就是 <a href="https://jsstm.jszwfw.gov.cn/jkmIndex.html?token=xxxxxxxxxxxxxxxx&amp;uuid=xxxxxxxxxxxxxxx">https://jsstm.jszwfw.gov.cn/jkmIndex.html?token=xxxxxxxxxxxxxxxx&amp;uuid=xxxxxxxxxxxxxxx</a> 这样的格式，直接访问就可以看到自己的苏康码界面。</p><h3 id="获取行程码直链"><a href="#获取行程码直链" class="headerlink" title="获取行程码直链"></a>获取行程码直链</h3><p>行程码直链更简单，直接就可以搜到： <a href="https://xc.caict.ac.cn/">https://xc.caict.ac.cn/</a> 。有趣的是，行程码居然是用 Vue 框架做的，如果只是普通的 HTML 表单页面的话，我也许会做一个自动发验证码查询的功能。</p><h3 id="APP-开发"><a href="#APP-开发" class="headerlink" title="APP 开发"></a>APP 开发</h3><p>安装移动端开发相关 SDK 后，启动宇宙最强 IDE，新建一个空项目叫 <code>ShuangShuangMa</code> （随便起一个名字，双双码），然后面向 Google 编程……基本上只要查一下怎么使用 WebView 以及如何实现滑动切换页面就好了。</p><p>代码非常简单，xaml 页面如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CarouselPage</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xamarin.com/schemas/2014/forms&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">x:Class</span>=<span class="string">&quot;ShuangShuangMa.MainPage&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentPage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WebView</span> <span class="attr">x:Name</span>=<span class="string">&quot;WebView_SuKangMa&quot;</span> <span class="attr">VerticalOptions</span>=<span class="string">&quot;FillAndExpand&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Text</span>=<span class="string">&quot;点击刷新&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;50,10&quot;</span> <span class="attr">Clicked</span>=<span class="string">&quot;Button_RefreshSuKangMa_Clicked&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ContentPage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ContentPage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackLayout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">WebView</span> <span class="attr">x:Name</span>=<span class="string">&quot;WebView_XingChengMa&quot;</span> <span class="attr">VerticalOptions</span>=<span class="string">&quot;FillAndExpand&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ContentPage</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">CarouselPage</span>&gt;</span></span><br></pre></td></tr></table></figure><p>C# 逻辑如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Xamarin.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ShuangShuangMa</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainPage</span> : <span class="title">CarouselPage</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPage</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            WebView_SuKangMa.Source = <span class="string">&quot;https://jsstm.jszwfw.gov.cn/jkmIndex.html?token=xxxxxx&amp;uuid=xxxxxx&quot;</span>;</span><br><span class="line">            WebView_XingChengMa.Source = <span class="string">&quot;https://xc.caict.ac.cn/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button_RefreshSuKangMa_Clicked</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            WebView_SuKangMa.Reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部分解释：</p><ol><li>添加刷新按钮是因为，WebView 在后台不会运行，而苏康码上的时间又是在前端运算的，所以防止再次打开应用后，苏康码的时间不对；</li><li>行程码网页在重新加载后就必须重新认证手机号，而 Android 应用在触发返回按钮后，会关闭所有的 WebView，所以需要在 <code>MainActivity.cs</code> 中添加以下代码以便把返回按钮当 Home 键用：</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnBackPressed</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MoveTaskToBack(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，应用安装后得关闭电池优化、锁在后台，毕竟被清理掉之后又得重新认证行程码。</p><p>至此，APP 完成。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>效果见下面的视频：</p><video src='https://img.vvzero.com/blog/diy-to-combine-sukangma-and-xingchengma/4.mp4 ' type='video/mp4' controls='controls' width='320px'></video><p>话说，本来想着 Xamarin 是跨平台的，准备给玲玲的 iPhone 也整一个的，但无奈意识到自己没有 Mac，作罢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;众所周知的背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;苏康码打开很慢，在支付宝中如果没有快捷键，需要以下步骤：点击打开支付宝 -&amp;gt
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Xamarin" scheme="https://blog.vvzero.com/tags/Xamarin/"/>
    
      <category term="C#" scheme="https://blog.vvzero.com/tags/C/"/>
    
      <category term="WEB" scheme="https://blog.vvzero.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>我两周就写了三行代码 - ARM Cortex A9 中断与浮点数运算、FPU 问题</title>
    <link href="https://blog.vvzero.com/2022/03/08/arm-cortex-a9-interrupt-with-fpu/"/>
    <id>https://blog.vvzero.com/2022/03/08/arm-cortex-a9-interrupt-with-fpu/</id>
    <published>2022-03-08T13:09:38.000Z</published>
    <updated>2022-03-08T14:16:45.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>公司产品采用了 Xilinx Zynq 7z010 芯片，用于运动控制以及网络通讯。两周前，测试过程中发现网络通信会小概率出错，TCP 收到的数据 CRC 校验失败，无法稳定复现。</p><p>设备平台概述：</p><ol><li>CPU: Cortex-A9 双核</li><li>RAM: 1GB DDR3</li><li>操作系统: FreeRTOS</li><li>网络协议栈: lwip211</li></ol><h2 id="定位过程"><a href="#定位过程" class="headerlink" title="定位过程"></a>定位过程</h2><h3 id="怀疑应用层数据处理问题"><a href="#怀疑应用层数据处理问题" class="headerlink" title="怀疑应用层数据处理问题"></a>怀疑应用层数据处理问题</h3><p>TCP 是二进制数据流，每个包的长度不固定，应用层也许会写错。于是我修改了应用层的处理方案，手动构造了定长的数据包，虽然会导致 TCP 流量大幅上涨，但是逻辑看起来更清晰。</p><p>然而，修改后，似乎由于流量变大了，原来小概率出现的错误，现在大概率会出现！这也给 Debug 带来了有利的一面。</p><h3 id="怀疑网络通讯链路电磁干扰问题"><a href="#怀疑网络通讯链路电磁干扰问题" class="headerlink" title="怀疑网络通讯链路电磁干扰问题"></a>怀疑网络通讯链路电磁干扰问题</h3><p>但是这个怀疑方向很快就被否定了，因为我用了 TCP 协议，理论上只可能超时，不可能出错。</p><h3 id="怀疑-lwip-接口调用问题"><a href="#怀疑-lwip-接口调用问题" class="headerlink" title="怀疑 lwip 接口调用问题"></a>怀疑 lwip 接口调用问题</h3><p>lwip 有多个 TCP API，之前用的 Socket API，我尝试换成了 RAW API，但是问题依旧。</p><p>在调试的过程中，我尝试在网络链路的每一层数据打印出来，惊奇地发现，在数据链路层，数据是正确的！然而 lwip 的代码冗杂且数 MB 数据中才会出现几个错误位，于是我暂时没有考虑一层层分析代码。</p><h3 id="怀疑与其他线程之间存在干扰，或者存在数组越界访问"><a href="#怀疑与其他线程之间存在干扰，或者存在数组越界访问" class="headerlink" title="怀疑与其他线程之间存在干扰，或者存在数组越界访问"></a>怀疑与其他线程之间存在干扰，或者存在数组越界访问</h3><p>这样 Debug 就很简单了。我关闭了所有其他的线程，不出所料，Bug 消失了。</p><p>一点点放开线程，发现是一个<strong>运动控制的硬中断</strong>造成的 Bug。</p><p>然后再“二分法”排除代码，结果排除到最后，仅仅是一行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b, c 也为 long long</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a = (<span class="keyword">long</span> <span class="keyword">long</span>)((<span class="keyword">double</span>)b * (<span class="keyword">double</span>)c);</span><br></pre></td></tr></table></figure><p>这让我大跌眼镜，因为实验证明，把这句话删了，TCP 通讯就正常了。</p><h3 id="怀疑是浮点运算的问题"><a href="#怀疑是浮点运算的问题" class="headerlink" title="怀疑是浮点运算的问题"></a>怀疑是浮点运算的问题</h3><p>更加让我迷惑的是，把上述语句改下，同样也没问题了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a = b * c;</span><br></pre></td></tr></table></figure><p>进一步定位：我在另一个线程中添加了浮点运算，并把这个有影响的中断关闭，TCP 通讯同样出问题了。</p><p>就此，几乎可以确定是浮点数运算造成的问题了。</p><h3 id="问题小结"><a href="#问题小结" class="headerlink" title="问题小结"></a>问题小结</h3><p>一句话描述问题：在中断或某个线程中进行浮点数操作，会导致另一个 TCP 通讯线程数据出错。</p><p>说实话，我当时也没法理解其中的联系。</p><p>只不过我们用的芯片自带双精度 FPU（浮点运算单元），也许是 FPU 的问题？</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><h3 id="查找资料"><a href="#查找资料" class="headerlink" title="查找资料"></a>查找资料</h3><p>关键词 <code>lwip tcp receive wrong data</code>，<code>zynq float process corrupt memory</code> 等关键词，都没有找到有价值的解决方案。</p><h3 id="求助-Xilinx-技术支持"><a href="#求助-Xilinx-技术支持" class="headerlink" title="求助 Xilinx 技术支持"></a>求助 Xilinx 技术支持</h3><p>果然用微信联系的技术支持不靠谱，上午说帮忙复现，下午就没信了。</p><h3 id="求助朋友圈资深开发者"><a href="#求助朋友圈资深开发者" class="headerlink" title="求助朋友圈资深开发者"></a>求助朋友圈资深开发者</h3><p>只可惜他们都是互联网界的大佬，只有我在嵌入式开发领域摸爬滚打，他山之玉难以攻石。</p><h3 id="求助-V2EX-网友"><a href="#求助-V2EX-网友" class="headerlink" title="求助 V2EX 网友"></a>求助 V2EX 网友</h3><p>发了帖子 <a href="https://v2ex.com/t/838643">在这里</a>。</p><p>V 站网友给了非常有价值的线索：</p><ol><li>网友 A 称他们使用同样的平台出现过类似的问题。他们的解决方案是，进行浮点数操作之前，关闭所有的中断；</li><li>网友 B 分析可能 <code>正在计算浮点数的时候，刚好发生了 systick 线程切换，但是线程切换过程中，没有保存 /恢复浮点寄存器</code>；</li><li>网友 C 更是找到了相关文章：<blockquote><p>“Some GCC libraries optimise memory copy and memory set (and possibly other) functions by making use of the wide floating point registers. Therefore, by default, any task that uses functions such as memcpy(), memcmp() or memset(), or uses a FreeRTOS API function such as xQueueSend() which itself uses memcpy(), will inadvertently corrupt the floating point registers.”</p></blockquote></li></ol><p>真可谓一针见血，<strong>TCP 协议栈中大量使用了 memcpy，而 memcpy 又使用了 FPU 的寄存器，极有可能在 TCP 处理数据的过程中，另一个中断来了，进行了浮点运算并修改了 FPU 的寄存器，以致 TCP 数据出错。</strong></p><p>同样根据网友的指点，看了这篇文章 <a href="https://www.freertos.org/Using-FreeRTOS-on-Cortex-A-Embedded-Processors.html">Using FreeRTOS on ARM Cortex-A9 Embedded Processors</a>，原来 FreeRTOS 自身已经考虑了 FPU 与上下文切换相关的问题，只是要我们将 <code>configUSE_TASK_FPU_SUPPORT</code> 这个宏定义为 2 即可。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>花了些时间进行 FPU 寄存器相关的搜索，依照 <a href="https://stackoverflow.com/questions/38667425/how-to-push-and-pop-floating-point-registers-to-the-stack-on-armv7-32-bit">这篇文章</a> ，对 FPU 的寄存器做了相关处理，总结起来就三行代码：</p><h3 id="第一行代码"><a href="#第一行代码" class="headerlink" title="第一行代码"></a>第一行代码</h3><p>在中断响应函数开头添加以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__asm(<span class="string">&quot;VPUSH &#123;d0-d15&#125;&quot;</span>); <span class="comment">// FPU 寄存器入栈</span></span><br></pre></td></tr></table></figure><h3 id="第二行代码"><a href="#第二行代码" class="headerlink" title="第二行代码"></a>第二行代码</h3><p>在中断响应函数末尾添加以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__asm(<span class="string">&quot;VPOP &#123;d0-d15&#125;&quot;</span>); <span class="comment">// FPU 寄存器出栈</span></span><br></pre></td></tr></table></figure><h3 id="第三行代码"><a href="#第三行代码" class="headerlink" title="第三行代码"></a>第三行代码</h3><p>FreeRTOS 启用 FPU 支持相关宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> configUSE_TASK_FPU_SUPPORT 2</span></span><br></pre></td></tr></table></figure><p>至此，问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题出现&quot;&gt;&lt;a href=&quot;#问题出现&quot; class=&quot;headerlink&quot; title=&quot;问题出现&quot;&gt;&lt;/a&gt;问题出现&lt;/h2&gt;&lt;p&gt;公司产品采用了 Xilinx Zynq 7z010 芯片，用于运动控制以及网络通讯。两周前，测试过程中发现网络通信会小概率出
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="ARM" scheme="https://blog.vvzero.com/tags/ARM/"/>
    
      <category term="FPU" scheme="https://blog.vvzero.com/tags/FPU/"/>
    
  </entry>
  
  <entry>
    <title>苏州新冠疫情带来 2019 年 12 月的回忆</title>
    <link href="https://blog.vvzero.com/2022/02/18/thoughts-in-2022-2-suzhou-covid-19-epidemic/"/>
    <id>https://blog.vvzero.com/2022/02/18/thoughts-in-2022-2-suzhou-covid-19-epidemic/</id>
    <published>2022-02-18T04:29:29.000Z</published>
    <updated>2022-02-18T05:14:15.167Z</updated>
    
    <content type="html"><![CDATA[<p>苏州最近多地出现了新冠肺炎病人，我现在就在苏州。以前总是看到其他地方各种中高风险地区，各种全员核酸检测，现在我就身处其中。</p><p>很多人已经习惯了新闻里每天都会出现的疫情播报，习惯了每天戴口罩，但我总能记起 2019 年 12 月前后的一些琐碎细节，恍如隔世。</p><p>2019 年 12 月，我还在南航，大四上学期。这大概就是我“大学最幸福的时光”的最后一个多月吧，各种主要的困难课程都在大一大二结束了，大三又有大把的时间跟创新区的大神们学技术、吹牛逼，现在技术水平尚可，时间充裕，毕设就是小儿科，连校招都尘埃落定了，该干一番大事了。</p><p>大概 12 月 25 日左右，我在创新区度过了与往常一样幸福的一天后，晚上看到了“武汉出现新型冠状病毒”相关的新闻。当时我就有一点害怕，毕竟我当年也是生物课程的学霸，关于传染病相关的理论也略懂。只是不知道怎么办，想了想，于是去校门口药店买了一包医用口罩，黑色的，质量非常好，只是包装有点旧了，甚至落了灰尘。</p><p>第二天戴着口罩在路上走，倒也没有人侧目，就是自己感觉有点怪怪的，有点格格不入。到了导师实验室也就一个学长“哟，戴口罩干啥”，我嘿嘿傻笑。晚上从创新区回宿舍，遇到了陈学弟，问我咋了，我说武汉出现了新型肺炎，防范一下。陈学弟不以为意：“武汉离南京好远呢”，我：“逻辑距离其实挺近的，坐高铁几个小时而已”。</p><p>12 月 30 日左右，我陪玲玲坐校车去南航明故宫校区拿普通话考试证书。在校车上，当时当然不会有人戴口罩，我也没戴。我跟玲玲说了“肺炎”相关的问题，然后又在微信上问了高中同学王同学的意见（他当时在南医大学医），王同学：“小心点，这好像是新型冠状病毒造成的肺炎，去武汉的话得戴好口罩！”</p><p>玲玲和我好像都多了一丝忧愁，拿到证书后，我分了玲玲几个口罩。</p><p>2020 年 1 月中旬回家，刚好是全民大规模防疫的前夕。我坐大巴回家的，全车只有我一个人戴口罩，他们也并不知道接下来两三天会发生什么，当然不是过年的喜庆。</p><p>接下来的事情就众所周知了，只记得当时，我突然很反感与我共处一室的人咳嗽，我开始疯狂洗手，我再也不直接用手摸脸抠鼻……我还记得我变得很焦虑，在群里与大家吹水的话题由“Nginx 代理转发规则”变成了“新冠病毒特效药”。大年初三左右，同一个小区的姨妈来我家拜年，我也躲在自己房间里不见……</p><p>我曾跟玲玲开玩笑似的聊过：“细想起来，我们真的好惨好倒霉啊，大学刚要毕业，正是最有干劲的时候，结果新冠肺炎来了，全世界的情形因此急转而下，很多事情难度变得很大……”</p><p>没想到，现在已经是 2022 年 2 月了，四舍五入都快三年了。但我现在心态好得不行，城市周围就有病人，但我并不焦虑。只不过依旧像《生活大爆炸》里的 Sheldon 一样，特别爱卫生，周围有人有症状我都会离他远远的，依旧勤洗手，依旧不去摸脸……</p><p>我也依旧期待着，全世界彻底摆脱疫情阴霾的那一天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;苏州最近多地出现了新冠肺炎病人，我现在就在苏州。以前总是看到其他地方各种中高风险地区，各种全员核酸检测，现在我就身处其中。&lt;/p&gt;
&lt;p&gt;很多人已经习惯了新闻里每天都会出现的疫情播报，习惯了每天戴口罩，但我总能记起 2019 年 12 月前后的一些琐碎细节，恍如隔世。&lt;/p
      
    
    </summary>
    
      <category term="LIVES" scheme="https://blog.vvzero.com/categories/LIVES/"/>
    
    
      <category term="苏州" scheme="https://blog.vvzero.com/tags/%E8%8B%8F%E5%B7%9E/"/>
    
      <category term="新冠肺炎" scheme="https://blog.vvzero.com/tags/%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E/"/>
    
  </entry>
  
  <entry>
    <title>随便聊聊最近在本站折腾的那些东西</title>
    <link href="https://blog.vvzero.com/2022/01/24/Casual-talk-of-current-site-management/"/>
    <id>https://blog.vvzero.com/2022/01/24/Casual-talk-of-current-site-management/</id>
    <published>2022-01-24T02:23:44.000Z</published>
    <updated>2022-01-24T08:12:37.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重新加上了 Disqus 评论系统，翻译了一个树莓派引脚定义网站，换了企业邮箱服务商，部署了一个站点监控系统，开始搞 nextcloud 中文论坛……随便聊聊最近在本站折腾的那些东西。</p></blockquote><h2 id="Disqus-评论系统"><a href="#Disqus-评论系统" class="headerlink" title="Disqus 评论系统"></a>Disqus 评论系统</h2><p>本站博客一直用的是 hexo，评论系统一开始也是用的 Disqus，后来不知道为啥就把评论系统给删了（可能是因为被墙了没意思？还是因为换了主题不支持啥的）。评论系统删了以后，又脑抽用 flarum 搭建了一个论坛，然后每篇博客前面都加一个对应的论坛讨论地址……这个方案被 PM 学叔给喷了，因为谁会为了评论，再去注册一个你的论坛账户呢？所以前几天把论坛给删了（话说也只有瑞辅一个人评论过一次，哈哈）。</p><p>Disqus 评论系统可能是在 hexo 上最好用的评论系统了，谁让 hexo 自己本身就是一个静态页面呢。但问题是 Disqus 被墙了，我得提醒读者，本站是有评论系统的。很久以前看到奶冰的博客，也是用的 Disqus，他是自己加了一个按钮，提醒用户点击加载 Disqus 评论组件。于是时隔几年我把这个想法抄过来了。</p><p>一开始感觉做这个按钮好复杂啊，因为自己几乎没有前端开发的经验。但是随便翻了翻我用的这个 aircloud 主题，发现源码改起来还是挺容易的，就强行加了一个按钮（话说改的方法我也上传到我 fork 的这个仓库里面了，<a href="https://github.com/Villivateur/hexo-theme-aircloud">https://github.com/Villivateur/hexo-theme-aircloud</a>。</p><h2 id="博客主题的魔改"><a href="#博客主题的魔改" class="headerlink" title="博客主题的魔改"></a>博客主题的魔改</h2><p>除了改了评论系统，我也魔改了其他小东西。我有点洁癖嘛，而且自从上次 jsdelivr 被拔网线的事情之后，我觉得静态资源用其他的站点托管都不太稳定，于是把 aircloud 里面用到的 js 和 CSS 都下载并重新托管在了自己的服务器上。</p><p>aircloud 还提供了浏览量计数功能，一看也是加载了第三方的 JS，算了不要了，有点洁癖。</p><h2 id="树莓派引脚定义网站-pinout-vvzero-com"><a href="#树莓派引脚定义网站-pinout-vvzero-com" class="headerlink" title="树莓派引脚定义网站 pinout.vvzero.com"></a>树莓派引脚定义网站 pinout.vvzero.com</h2><p>很早就了解到过一个做得很棒的树莓派引脚定义查询网站 pinout.xyz，而且已经有人翻译成了法语、德语、土耳其语啥的。我一直有很强烈的翻译欲望，现在终于找到了一个适合翻译的（之前没人翻译过、数据量不大），于是就开始了。</p><p>按照原作者给的翻译指引翻译了几个页面，但是感觉不过瘾，于是把本不该翻译的也翻译了（比如页面左下角的树莓派小图，还有生成脚本里面的一些细节），看来是没法全部提交 PR 了。故又 fork 了一个纯中文版的仓库，地址 <a href="https://git.vvzero.com/villivateur/pinout.vvzero.com">https://git.vvzero.com/villivateur/pinout.vvzero.com</a> ，用于部署 <a href="https://pinout.vvzero.com/">https://pinout.vvzero.com</a> 。按照翻译指引的仓库 <a href="https://github.com/Villivateur/Pinout.xyz">https://github.com/Villivateur/Pinout.xyz</a> 只用来提交 PR。</p><h2 id="zoho-企业邮箱"><a href="#zoho-企业邮箱" class="headerlink" title="zoho 企业邮箱"></a>zoho 企业邮箱</h2><p>腾讯企业邮箱是越来越恶心了，强行给你绑企业微信，还各种限制，不用微信登陆就强制改密码，算了，终于忍不了弃用了。V 站网友推荐了 zoho 邮箱，试了下感觉不错，于是给自己和玲玲买了两个账户，国区的，一年一共 100，完全可以接受。</p><p>目前发现 zoho 邮箱有两个问题：</p><ol><li>spam 有点严格，zoho 自家发的邮件都会进去，哈哈</li><li>我在 archive.org 的注册邮件，zoho 收不到</li></ol><h2 id="站点监控部署"><a href="#站点监控部署" class="headerlink" title="站点监控部署"></a>站点监控部署</h2><p>也是看到奶冰的网站，有个站点监控的玩意，用了 uptimerobot 的服务，试了下挺好玩，于是也部署在了 <a href="https://status.vvzero.com/">https://status.vvzero.com</a></p><h2 id="nextcloud-中文论坛"><a href="#nextcloud-中文论坛" class="headerlink" title="nextcloud 中文论坛"></a>nextcloud 中文论坛</h2><p>算是闲得蛋疼吧，感觉没人做 nextcloud 中文论坛，但我用 nextcloud 确实很多，就“抢先”搞了，虽然目前没什么内容。<a href="https://www.nextcloudcn.com/">https://www.nextcloudcn.com</a> 这个域名还是我抢注的，之前一个人刚好到期。没备案，所以只能托管在香港，套个 cloudflare。</p><p>至于运营就看情怀了，希望明年还想续费这个域名……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;重新加上了 Disqus 评论系统，翻译了一个树莓派引脚定义网站，换了企业邮箱服务商，部署了一个站点监控系统，开始搞 nextcloud 中文论坛……随便聊聊最近在本站折腾的那些东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Disqu
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="树莓派" scheme="https://blog.vvzero.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="email" scheme="https://blog.vvzero.com/tags/email/"/>
    
      <category term="站点监控" scheme="https://blog.vvzero.com/tags/%E7%AB%99%E7%82%B9%E7%9B%91%E6%8E%A7/"/>
    
      <category term="评论系统" scheme="https://blog.vvzero.com/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="nextcloud" scheme="https://blog.vvzero.com/tags/nextcloud/"/>
    
  </entry>
  
  <entry>
    <title>分享一下我的家庭网络布局</title>
    <link href="https://blog.vvzero.com/2021/11/04/Network-devices-at-my-home/"/>
    <id>https://blog.vvzero.com/2021/11/04/Network-devices-at-my-home/</id>
    <published>2021-11-04T13:47:31.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我的家庭网络拓扑图"><a href="#我的家庭网络拓扑图" class="headerlink" title="我的家庭网络拓扑图"></a>我的家庭网络拓扑图</h2><p><img src="https://img.vvzero.com/blog/Network-devices-at-my-home/1.jpg"></p><h3 id="数据流部分"><a href="#数据流部分" class="headerlink" title="数据流部分"></a>数据流部分</h3><ol><li>网络核心部分是 Nano Pi R2S 这个软路由，经过一年调教，已经能适应我这里的一切网络需求了。主要运行了 Wireguard、流量监控、网路唤醒等服务。因为我们小区只有百兆网，所以性能暂时够用。</li><li>几乎所有网络设备都通过中间这个交换机与软路由通讯，虽然不算什么好的交换机，但是同理，够用。</li><li>数据中心是用 intel NUC8 搭建的家庭服务器，主要部署了 emby、Nextcloud、qbittorrent 等服务，满足了家庭观影、数据存储等需求。</li><li>存储采用多个硬盘，目前放弃了阵列模式，家庭用的话还是单块盘来用性价比最高，经常冷备、热备就好。</li><li>家庭服务器通过 FRP 服务把 Nextcloud 服务映射到公网，方便在外看家庭数据。</li><li>主力机是一台 E3-1231 V3 的机器，为什么还在用好几年前的平台？因为满足我的需求了。</li><li>我把一台小米路由器当 AP 用了，目前可以满足所有智能家居、所有手机、平板的稳定联网。</li><li>智能家居方面，完全采用了小米的方案，好看就是王道。</li></ol><h3 id="功率电部分"><a href="#功率电部分" class="headerlink" title="功率电部分"></a>功率电部分</h3><ol><li>图中除了主力 PC、移动设备和智能家居，其他均部署在一个机柜内，所以两个插排就搞定了。</li><li>UPS 还是很有必要的，帮我至少挡住了两次意外停电。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;我的家庭网络拓扑图&quot;&gt;&lt;a href=&quot;#我的家庭网络拓扑图&quot; class=&quot;headerlink&quot; title=&quot;我的家庭网络拓扑图&quot;&gt;&lt;/a&gt;我的家庭网络拓扑图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img.vvzero.com/blog/Netw
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="智能家居" scheme="https://blog.vvzero.com/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
      <category term="运维" scheme="https://blog.vvzero.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Mapuino - 一个硬件极客风的 WEB 访客地图显示摆件</title>
    <link href="https://blog.vvzero.com/2021/09/27/Mapuino-a-cute-knickknack-for-web-access-monitor/"/>
    <id>https://blog.vvzero.com/2021/09/27/Mapuino-a-cute-knickknack-for-web-access-monitor/</id>
    <published>2021-09-27T13:46:59.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mapuino-是什么"><a href="#Mapuino-是什么" class="headerlink" title="Mapuino 是什么"></a>Mapuino 是什么</h2><p>Mapuino 是一个简单的摆件，或者叫“玩具”。你可以在自己的个人博客、主页或者任何可以插入个性代码的社交网站（如 V2EX）上添加一行 URL，然后就可以在 Mapuino 上观赏全国哪些地方的人正在访问你的网站。</p><p><img src="https://img.vvzero.com/blog/Mapuino-a-cute-knickknack-for-web-access-monitor/1.jpg"></p><h2 id="Mapuino-不是什么"><a href="#Mapuino-不是什么" class="headerlink" title="Mapuino 不是什么"></a>Mapuino 不是什么</h2><p>Mapuino 不是生产力工具，它功能单一，仅供娱乐。但它真的可以给你的生活带来一些小乐趣。</p><h2 id="Mapuino-的历史故事"><a href="#Mapuino-的历史故事" class="headerlink" title="Mapuino 的历史故事"></a>Mapuino 的历史故事</h2><p>2017 年秋学季，我上大二，有幸加入学校的学生 IT 创新创业区，并认识了 suruifu 同学，当时我所在的部门叫“物联网创新区”。圣诞前夜，suruifu 同学在创新区内给我分享了一个外国小哥的 youtube 视频。视频中，外国小哥做了一个圣诞树，神奇之处是，只要有人 ping 他的电脑 ip，圣诞树上就会随机亮起一个 LED。很多人一起 ping 的时候，圣诞树就会闪闪发光。</p><p>suruifu 同学感慨：“这才是物联网！”</p><p>而后，到了今年，一个月以前，我做了第一个小摆件 <a href="https://blog.vvzero.com/2021/08/31/Topuino-the-wonderful-Knickknack-for-server-monitoring/">Topuino</a>。</p><p>用同样的技术栈，我又做了 Mapuino。</p><h2 id="Mapuino-的工作模式"><a href="#Mapuino-的工作模式" class="headerlink" title="Mapuino 的工作模式"></a>Mapuino 的工作模式</h2><p>Mapuino 与 Topuino 类似，在配置之后，会连接 Wi-Fi 并从服务器获取数据，在每个周期内（比如 1 分钟），所有在上一个周期访问过你网站的用户，其所在省级行政区的 LED 将会亮起。</p><h2 id="Mapuino-的工作原理"><a href="#Mapuino-的工作原理" class="headerlink" title="Mapuino 的工作原理"></a>Mapuino 的工作原理</h2><p>硬件部分与 Topuino 非常类似，采用 ESP8266 作为 MCU，TM1638 作为 LED 驱动。</p><p>Mapuino 会以 1 分钟为周期向服务器发起请求，服务器返回上一个周期哪些地区有用户访问了指定 URL。此 URL 可以嵌入在任何网页中，比如通过 JS 发起请求，或者假装是一个 img 标签，或者也可以用各类站长测速工具直接 DDOS 这个 URL……</p><p>服务端直接解析访问此 URL 的 IP 所在地（目前使用了高德的 API），并临时存储。</p><p><img src="https://img.vvzero.com/blog/Mapuino-a-cute-knickknack-for-web-access-monitor/2.jpg"></p><h2 id="与-Topuino-相比的改进"><a href="#与-Topuino-相比的改进" class="headerlink" title="与 Topuino 相比的改进"></a>与 Topuino 相比的改进</h2><ol><li>体积更小，<del>可以白嫖部分 PCB 打样厂的免费额度</del>；</li><li>调整了下面两个固定孔的位置，可以直接拧上两个螺柱，方便放在桌上；</li><li>隐藏了 Wi-Fi 天线；</li><li>成本更低。</li></ol><h2 id="代码与开源"><a href="#代码与开源" class="headerlink" title="代码与开源"></a>代码与开源</h2><p>硬件端: <a href="https://github.com/Villivateur/Mapuino">https://github.com/Villivateur/Mapuino</a></p><p>服务端: <a href="https://github.com/Villivateur/MapuinoServer">https://github.com/Villivateur/MapuinoServer</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我又有其他点子啦，下一个做啥呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mapuino-是什么&quot;&gt;&lt;a href=&quot;#Mapuino-是什么&quot; class=&quot;headerlink&quot; title=&quot;Mapuino 是什么&quot;&gt;&lt;/a&gt;Mapuino 是什么&lt;/h2&gt;&lt;p&gt;Mapuino 是一个简单的摆件，或者叫“玩具”。你可以在自己的个人
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Arduino" scheme="https://blog.vvzero.com/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://blog.vvzero.com/tags/ESP8266/"/>
    
      <category term="IoT" scheme="https://blog.vvzero.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Topuino - 你愿意在办公桌上放一个监控服务器的小摆件吗？</title>
    <link href="https://blog.vvzero.com/2021/08/31/Topuino-the-wonderful-Knickknack-for-server-monitoring/"/>
    <id>https://blog.vvzero.com/2021/08/31/Topuino-the-wonderful-Knickknack-for-server-monitoring/</id>
    <published>2021-08-31T13:21:35.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我做了一个用来监控服务器的桌面小摆件</p></blockquote><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/1.png"></p><h2 id="什么是-Topuino"><a href="#什么是-Topuino" class="headerlink" title="什么是 Topuino"></a>什么是 Topuino</h2><p>Topuino 是我 DIY 的一个桌面小摆件，可以实现通用服务器或计算机的数据监控，包括 CPU 占用、RAM 占用、两个硬盘的可用空间、硬盘读写速度、网络 IO 速率。</p><h2 id="为什么叫-Topuino"><a href="#为什么叫-Topuino" class="headerlink" title="为什么叫 Topuino"></a>为什么叫 Topuino</h2><p>在 Linux 系列服务器上，我们通常使用 top 命令查看 CPU 内存占用，我最初的设想也是将 top 命令实物化，这就是 Topuino 中 Top 的由来。</p><p>在选型的时候，为了兼顾开发效率和成本，我选用了大名鼎鼎的 ESP8266 单片机，配合了 Arduino 开发框架，Arduino 则是 Topuino 中 uino 的由来。</p><h2 id="Topuino-有哪些亮点"><a href="#Topuino-有哪些亮点" class="headerlink" title="Topuino 有哪些亮点"></a>Topuino 有哪些亮点</h2><p>先看图解：</p><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/2.png"></p><ol><li>我觉得它挺好看，哑光黑的 PCB 底板富有科技感，红绿蓝三色 LED 层次分明，指示性强；</li><li>显示的参数满足大部分的需求，刷新率为 1 秒，CPU、内存、磁盘占用以百分比表示在柱状图上，磁盘、网络 IO 各以四位数码管显示，配合 KB、MB 单位显示，可以表示 0KB - 9999MB /s 的速率；</li><li>配置、操作方便。在需要监控的服务器上只需要跑一个 python 脚本即可；Topuino 首次上电后支持用手机或任何支持 Wi-Fi 的设备连接，并通过浏览器配置。若需要重新配置，通过按键即可恢复；</li><li>使用了通用的 USB-TypeC 接口（后期会做带电池版本）；</li><li>成本不高，谁都可以承担。</li></ol><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/3.jpg"></p><h2 id="Topuino-的工作原理"><a href="#Topuino-的工作原理" class="headerlink" title="Topuino 的工作原理"></a>Topuino 的工作原理</h2><ul><li>服务器部分很简单，主站使用了 Flask，维护一个数据库，保存着从站（被监控服务器）UUID 与运行参数的映射关系（实际上现在是用 python 的字典简单实现的）。主站接收从站的运行数据，并向 Topuino 回传数据；</li><li>服务器从站采用 python 的 psutil 库，获取所有的运行数据；</li><li>Topuino 硬件部分使用了 ESP-12F 作为 MCU，显示采用 LED 整列和数码管，显示驱动是 TM1638 芯片。</li></ul><p>附上原理图：</p><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/4.png"></p><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/5.png"></p><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/6.png"></p><p>PCB 打样交给专门的厂家，回来自己焊。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>你愿意在办公桌上放一个监控服务器的小摆件吗？至少，我做出来之后，很喜欢，就像看着一只猫一样。</p><p><img src="https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-monitoring/7.png"></p><p>另：ESP8266 的代码初步开源在 <a href="https://github.com/Villivateur/Topuino">https://github.com/Villivateur/Topuino</a> ，供大家参考。服务器端代码因为太简单且写得太丑，以后再说吧~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我做了一个用来监控服务器的桌面小摆件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img.vvzero.com/blog/Topuino-the-wonderful-Knickknack-for-server-mo
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Arduino" scheme="https://blog.vvzero.com/tags/Arduino/"/>
    
      <category term="IoT" scheme="https://blog.vvzero.com/tags/IoT/"/>
    
      <category term="Topuino" scheme="https://blog.vvzero.com/tags/Topuino/"/>
    
  </entry>
  
  <entry>
    <title>对 PlatformIO 有点失望</title>
    <link href="https://blog.vvzero.com/2021/04/16/A-little-pitty-for-PlatformIO/"/>
    <id>https://blog.vvzero.com/2021/04/16/A-little-pitty-for-PlatformIO/</id>
    <published>2021-04-16T12:45:20.000Z</published>
    <updated>2022-01-17T08:39:56.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>PlatformIO 目前只是玩具，单片机开发还得用 Keil</p></blockquote><p>好久不碰单片机，现在想搞个项目，选型 STM32xxxxxx，想找一套“现代化”的 IDE，于是找到了 PlatformIO。</p><p>刚开始很新奇很激动，VSCode 开发环境很友好，各种单片机型号、库很丰富，而且 STM32 可以直接用 Arduino 开发，各种一键式部署。最主要的是商用免费，差点就选用了。</p><p>但是问题很快就出现了，Arduino 框架对于底层的封装太完美，我甚至不能方便地修改 SPI 或者 I2C 的引脚，而且 GPIO 读写速度也相较使用 CMSIS 慢很多，STM32duino 虽然仍然在发展，但是，我认为还处在“玩具”的阶段。</p><p>如果抛弃 Arduino 框架，去使用 CMSIS ，那也太不方便了，而且 STM32 标准库在 PlatformIO 里面目前居然只支持很少几款芯片（F10x 系列全系不支持）。如果我要用 FreeRTOS，FreeRTOS 官方目前也没有适配 PlatformIO。</p><p>最终还是回到 Keil，花钱的才是最好的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;PlatformIO 目前只是玩具，单片机开发还得用 Keil&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好久不碰单片机，现在想搞个项目，选型 STM32xxxxxx，想找一套“现代化”的 IDE，于是找到了 PlatformIO。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Arduino" scheme="https://blog.vvzero.com/tags/Arduino/"/>
    
      <category term="PlatformIO" scheme="https://blog.vvzero.com/tags/PlatformIO/"/>
    
      <category term="STM32" scheme="https://blog.vvzero.com/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>我们订婚了 We are engaged!</title>
    <link href="https://blog.vvzero.com/2021/02/14/we-are-engaged/"/>
    <id>https://blog.vvzero.com/2021/02/14/we-are-engaged/</id>
    <published>2021-02-14T13:38:02.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<p>2021年2月14日，情人节，农历正月初三，玲玲与瑾瑾喜订良缘。</p><p>互联网是有记忆的，在此，我就以计算机为担保，依网络见证！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2021年2月14日，情人节，农历正月初三，玲玲与瑾瑾喜订良缘。&lt;/p&gt;
&lt;p&gt;互联网是有记忆的，在此，我就以计算机为担保，依网络见证！&lt;/p&gt;

      
    
    </summary>
    
      <category term="LIVES" scheme="https://blog.vvzero.com/categories/LIVES/"/>
    
    
      <category term="玲玲" scheme="https://blog.vvzero.com/tags/%E7%8E%B2%E7%8E%B2/"/>
    
      <category term="订婚" scheme="https://blog.vvzero.com/tags/%E8%AE%A2%E5%A9%9A/"/>
    
  </entry>
  
  <entry>
    <title>如何成为 CA，并签发自己的证书</title>
    <link href="https://blog.vvzero.com/2021/01/24/Become-a-CA-and-generate-self-signed-certificate/"/>
    <id>https://blog.vvzero.com/2021/01/24/Become-a-CA-and-generate-self-signed-certificate/</id>
    <published>2021-01-24T12:49:57.000Z</published>
    <updated>2022-01-17T08:39:56.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要读懂此文章，你需要了解对称加密、非对称加密的基本概念，并了解证书签发的基本流程。</p></blockquote><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><ol><li>一台 Linux 主机</li><li>openssl</li></ol><h2 id="创建-CA-的私钥"><a href="#创建-CA-的私钥" class="headerlink" title="创建 CA 的私钥"></a>创建 CA 的私钥</h2><p>很容易理解，CA 也有自己的公钥和私钥。</p><p><code>openssl genrsa -des3 -out CAPrivate.key 2048</code></p><p>这个命令会生成一个私钥 <code>CAPrivate.key</code>，并且必须要填写私钥的密码。可以将 2048 改成 4096。不要奇怪这里只有一个私钥，其实公钥也保存在这个文件里了。</p><h2 id="创建根证书"><a href="#创建根证书" class="headerlink" title="创建根证书"></a>创建根证书</h2><p><code>openssl req -x509 -new -nodes -key CAPrivate.key -sha256 -days 365 -out CAPrivate.pem</code></p><p>根证书，顾名思义，肯定是自签发的。这个证书待会需要安装到你的终端设备里面，不然靠这个根证书签发的其他证书不会被信任。</p><p>这个命令里面需要填写很多信息，按照实际填写就好。</p><p>至此，作为一个简单的 CA，所有的文件都已经齐全了。</p><h2 id="创建待签发证书的私钥"><a href="#创建待签发证书的私钥" class="headerlink" title="创建待签发证书的私钥"></a>创建待签发证书的私钥</h2><p>这个私钥与 CA 无关，是待签发的下一级证书。这一步和下一步可以在另一台机器上完成，然后把文件传给保存 CA 信息的机器就好。</p><p><code>openssl genrsa -out MyPrivate.key 2048</code></p><p>同样，可以把 2048 改成 4096。</p><h2 id="创建-CSR"><a href="#创建-CSR" class="headerlink" title="创建 CSR"></a>创建 CSR</h2><p>可以理解为一个待发送给 CA、为你签发证书的一个请求。</p><p><code>openssl req -new -key MyPrivate.key -out MyRequest.csr</code></p><p>同样，这里需要填写很多信息，需要注意的是 <code>Common Name</code> 这个项目，如果你的证书是给 https 用的，这里就填你的域名。</p><h2 id="使用-CA-的私钥签发证书"><a href="#使用-CA-的私钥签发证书" class="headerlink" title="使用 CA 的私钥签发证书"></a>使用 CA 的私钥签发证书</h2><p><code>openssl x509 -req -in MyRequest.csr -CA CAPrivate.pem -CAkey CAPrivate.key -CAcreateserial -out X509Certificate.crt -days 365 -sha256</code></p><h2 id="试一试刚刚签发的证书"><a href="#试一试刚刚签发的证书" class="headerlink" title="试一试刚刚签发的证书"></a>试一试刚刚签发的证书</h2><ol><li>在待测试终端设备上安装 CA 的根证书 <code>CAPricate.pem</code>，比如 Windows、Android，某些浏览器必须单独安装证书。</li><li>把 <code>MyPrivate.key</code> 和 <code>X509Certificate.crt</code> 作为 HTTPS 服务（比如 Nginx）的私钥和证书，写好配置文件。</li><li>在浏览器里面试试看，应该可以显示小锁，且没有安全警告。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;要读懂此文章，你需要了解对称加密、非对称加密的基本概念，并了解证书签发的基本流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;工具准备&quot;&gt;&lt;a href=&quot;#工具准备&quot; class=&quot;headerlink&quot; title=&quot;工具准备&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="网络安全" scheme="https://blog.vvzero.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="证书" scheme="https://blog.vvzero.com/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>我终于知道了补码的意义</title>
    <link href="https://blog.vvzero.com/2020/11/18/May-be-I-know-why-use-complement/"/>
    <id>https://blog.vvzero.com/2020/11/18/May-be-I-know-why-use-complement/</id>
    <published>2020-11-18T11:49:55.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文供初学者学习，供大佬批判。</p></blockquote><h2 id="补码背景"><a href="#补码背景" class="headerlink" title="补码背景"></a>补码背景</h2><p>很久很久以前，当我参加 NOIP（信息学奥林匹克竞赛）的时候，老师是这么讲补码的：</p><blockquote><p>int 型数据的最高位是符号位，符号位为 0 就代表这是正数，为 1 就是负数。但是，+0 和 -0 理应是同一个数，但在二进制中却表示成了两个不同的数（以 8 位为例，二进制表示）： 00000000 和 10000000。所以，我们引入了补码，补码就是，对负数而言，符号位不变，其他位取反，然后再加 1。于是， -0 的补码就是 10000000 -&gt; 11111111 -&gt; 00000000 与 +0 一致了。</p></blockquote><h2 id="补码的意义"><a href="#补码的意义" class="headerlink" title="补码的意义"></a>补码的意义</h2><p>其实当时我就该意识到，仅仅为了 0 这一个数便创建了“补码”这个概念，未免太浪费了。我最近看了 <em>CS: APP</em> 这本书，才进一步理解了补码。</p><p>补码，就是为有符号整数而创建的概念。对于无符号整数，是不存在“补码”的概念的。我们先看一个无符号数 00100101，它是怎么转换成十进制的？加权求和，<code>0×2^7+0×2^6+1×2^5+0×2^4+0×2^3+1×2^2+0×2^1+1×2^0=37</code>；无符号数 10000011，<code>1×2^7+0×2^6+0×2^5+0×2^4+0×2^3+0×2^2+1×2^1+1×2^0=131</code>。</p><p>对于有符号数呢？假如我们不用补码，那么有符号数 10000011，就是 <code>-(0×2^6+0×2^5+0×2^4+0×2^3+0×2^2+1×2^1+1×2^0)=-3</code>。人这么算起来是挺舒服，但是计算机会很难受，凭什么我最高位的权值没了？只能做符号？</p><p>然后我们试试补码。10000011 的补码是 11111101，如何用补码求它的十进制呢？其实这跟无符号数是一样的，只不过，最高位的权值，不是 2^7，而是 -2^7。求值：<code>1×(-2^7)+1×2^6+1×2^5+1×2^4+1×2^3+1×2^2+0×2^1+1×2^0=-3</code>，是不是很神奇？</p><p>对于正数而言，就更简单了，与无符号数一致。</p><h2 id="补码再探"><a href="#补码再探" class="headerlink" title="补码再探"></a>补码再探</h2><p>计算机只能做加法（不是），所以，我们看看用补码做加法，有什么好处。</p><p>先计算 -13+10 吧，很简单的二进制竖式加法：</p><table><thead><tr><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>11111101 即为 -3 的补码。</p><p>再算一个，-8+9：</p><table><thead><tr><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>神奇吗？最高位的 0 不见了，变成正数 1 了。</p><h2 id="补码小结"><a href="#补码小结" class="headerlink" title="补码小结"></a>补码小结</h2><p>补码，就是计算机内部有符号数的存储方式，我们不要认为补码是由原码“转换”而来的，补码本来就代表了实际的数字，11111101 == -3，就这样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文供初学者学习，供大佬批判。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;补码背景&quot;&gt;&lt;a href=&quot;#补码背景&quot; class=&quot;headerlink&quot; title=&quot;补码背景&quot;&gt;&lt;/a&gt;补码背景&lt;/h2&gt;&lt;p&gt;很久很久以前，当我参加 
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="补码" scheme="https://blog.vvzero.com/tags/%E8%A1%A5%E7%A0%81/"/>
    
      <category term="计算机原理" scheme="https://blog.vvzero.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用虚拟机绕过 Windows Samba 客户端端口限制</title>
    <link href="https://blog.vvzero.com/2020/04/28/use-virtual-machine-to-bypass-windows-samba-port-limit/"/>
    <id>https://blog.vvzero.com/2020/04/28/use-virtual-machine-to-bypass-windows-samba-port-limit/</id>
    <published>2020-04-28T05:39:48.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>迫于不能浪费宿舍联通宽带的公网 IP，我用树莓派搭建了一个 NAS，使用 Samba 提供访问。但是，由于运营商限制，入站和出站的 139、445 端口都被封禁（对！你不能访问其他机器的 445 端口！），这样做只能让同一个局域网的服务访问。我尝试修改了端口号，把本地的 445 端口映射到公网的其它端口，算是可以给大部分 Samba 客户端使用了（比如安卓手机）。但是，Windows 的 Samba 客户端，并不支持设置端口号（如果在文件管理器地址栏输入 <code>\\a.b.c.d:xxx</code> 将会被认为是 WebDAV 协议）。</p><p>网上某些教程说，在 Windows 本地设置端口转发，把访问本机 445 端口的流量转发至你的 Samba 服务器端口。但是，这样做需要关闭 Windows 自己的 Samba 服务器，会导致网络共享、网络打印机等很多功能无法使用，导致莫名其妙的问题，所以不推荐。</p><p>但是可以换个思路。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>既然不能使用本机（127.0.0.1）做转发，那么为什么不使用本地网络中其他的机器进行数据转发呢？一开始我想在本地网络中加一个树莓派之类的小主机，但觉得这样太累赘了。虚拟机也是独立的机器，我觉得一样有效。</p><p>所以，只要在虚拟机里面装一个反向代理应用（Nginx），把发往虚拟机 445 端口的流量转发到 Samba 服务器，然后使用 Windows Samba 客户端访问这个虚拟机，就等于访问 Samba 服务器。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>这里，我使用了 Windows Hyper V，创建了 Ubuntu 20.04 Server 虚拟机（直接下载官方 ISO），然后使用默认交换机作为虚拟机的网络。</p><img src="https://img.vvzero.com/blog/ih/2020/04/28/2416a9e0b66ec.png" alt="Snipaste_2020-04-28_14-07-57.png" style="zoom:33%;" /><p>启动后，安装系统，然后除了更新镜像源、安装 Nginx，什么都不用做。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>装好 Nginx 后，修改配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>添加一个 stream 模块，大致像下面：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">445</span>;</span><br><span class="line">        </span><br><span class="line">        // 你的 <span class="attribute">NAS</span> 地址</span><br><span class="line">        proxy_pass mynas.example.com:<span class="number">12345</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>转发的模块就做好了。</p><p>然后，再在 Windows 中打开 <code>\\&lt;虚拟机的ip&gt;\&lt;samba 路径（可选）&gt;</code> 就完成了。虚拟机 ip 可以在虚拟机里面用 ifconfig 命令查看。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>也许可以用 docker 实现，但我还没想好怎么搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;迫于不能浪费宿舍联通宽带的公网 IP，我用树莓派搭建了一个 NAS，使用 Samba 提供访问。但是，由于运营商限制，入站和出站的 139、
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Windows" scheme="https://blog.vvzero.com/tags/Windows/"/>
    
      <category term="Samba" scheme="https://blog.vvzero.com/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云 ECS 搭建廉价的高性能云桌面</title>
    <link href="https://blog.vvzero.com/2020/02/08/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/"/>
    <id>https://blog.vvzero.com/2020/02/08/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/</id>
    <published>2020-02-08T09:35:36.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要想读懂本文，你需要：</p><ol><li>了解阿里云等云服务的基本 WEB 界面操作；</li><li>了解 Windows 操作系统的中阶操作；</li><li>了解基础的软件开发术语。</li></ol></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文面向的是需要使用高性能计算设备，但是身边只有低性能PC机的群体。最近由于 NCP 疫情，出不了门，返回不了工作地，想必不少人的高性能计算设备（好电脑）没带回家，但是，肯定也有人跟我一样，受不了笔记本电脑的龟速。</p><p>我的配置需求是，能够流畅运行安装多个插件的 VSCode、能够同时打开数十个 Firefox 标签页、能够快速完成 node 项目构建。但是我身边只有一台五年前的 intel NUC (i3-4010U, 4GB RAM)。</p><p>在详细了解了各大云服务商的云计算平台后，个人排除了华为云（弹性计算服务价格较高、云桌面售罄）、腾讯云（云计算服务类别过少）、天翼云（云桌面需要安装指定 APP 且性能不满足要求），决定使用阿里云的云计算服务。</p><h2 id="使用阿里云初步搭建云桌面"><a href="#使用阿里云初步搭建云桌面" class="headerlink" title="使用阿里云初步搭建云桌面"></a>使用阿里云初步搭建云桌面</h2><p>经过权衡，我决定使用阿里云 ESC “抢占式实例”付费模式下的“突发性能实例”。为什么这么选？</p><p>因为没钱……</p><p>开玩笑的。我觉得这是我需求下的合理选择方式。为什么选择“抢占式实例”？首先，我们复工的时间还是个未知数，而且可能随时就不想用这个云桌面了。“抢占式实例”是按量付费的一种，也就是，用多长时间给多少钱。并且，相对于按量付费，有相当大的折扣。<strong>“抢占式实例”的最大问题在于，这是竞价模式。也就是说，当别人出价比你高的时候，或者阿里云供给紧张而你又给钱给得不够的时候，它会自动帮你释放。我了解的是，在释放前5分钟，阿里云会有提醒。</strong>为了尽量避免实例被自动释放，我选择了“使用自动出价”，也就是说，系统会每小时自动判断当前时间该实例的价格，并选择一个高于市场均价的价格进行付费。<strong>但是，这并不是万无一失，阿里云在供给紧张的时候，仍然会将实例释放。</strong>所以，在处理重要数据时，应该随时备份。我的处理方法是，随时将代码提交到我的 Git 仓库。</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/ea3d50f39b198.png" alt="Snipaste_2020-02-09_17-32-20.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/df1fabf212984.png" alt="Snipaste_2020-02-09_17-34-24.png"></p><p>如果要保证不会被释放，建议使用包年包月制。</p><p>为什么使用“突发性能实例”？因为个人电脑与服务器不同。个人电脑不会时时刻刻占用大量 CPU，CPU使用率是离散化的，所以 CPU 的使用积分，我觉得是用不完，25% 的使用基线，完全够用。</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/d74c0622ec620.png" alt="Snipaste_2020-02-09_17-34-05.png"></p><p>哎，目前好像国内也只有阿里云能做出“抢占式实例”和“突发性能实例”。</p><p>其他的配置就简单了，区域选择靠近你的（不同地区的价格好像差别挺大），镜像选择 Windows Server，另外，SSD 是很关键的，我觉得现在已经没有多少人能忍受机械硬盘的龟速了。</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/6ae75caa75c6a.png" alt="Snipaste_2020-02-09_18-03-26.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/cbe75edc3c797.png" alt="Snipaste_2020-02-09_17-36-25.png"></p><p>在下一个页面配置网络，为了保证远程桌面流畅，按使用流量计费，带宽拉满！</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/2c112190ea447.png" alt="Snipaste_2020-02-09_17-45-57.png"></p><p>最终，我的配置如下：</p><ul><li>4核16GB，25% 平均CPU 计算性能；</li><li>100Mbps 按流量付费网络；</li><li>80GB SSD；</li><li>Windows Server 2019 数据中心版；</li></ul><p>这样的话，实例价格为 0.412 元每小时（我选的是上海区的，其他区的可能更便宜，在深夜、早上也会更便宜），流量费用为 0.8 元每 GB。算一算，一天大概要 10 元，一个月大概要 300 元，是不是还是有点贵？没关系，继续看。</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/ecfef72872df3.png" alt="Snipaste_2020-02-09_17-36-50.png"></p><h2 id="价格的进一步优化"><a href="#价格的进一步优化" class="headerlink" title="价格的进一步优化"></a>价格的进一步优化</h2><p>现在我已经启动了这个实例：</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/3ea24c1929367.png" alt="Snipaste_2020-02-09_18-21-04.png"></p><p>我还想更便宜。</p><h3 id="与基友合租一台机器"><a href="#与基友合租一台机器" class="headerlink" title="与基友合租一台机器"></a>与基友合租一台机器</h3><p>我想你一定不可能一天24小时都在用它，用它的时候也一定不会一直占满 CPU。关键是，我们这是 Windows Server，跟家庭版、专业版、企业版什么的都不一样，它支持多个用户同时登陆！所以，我觉得，如果有信任的人选，完全可以合租。</p><h3 id="关机时选择“停机不计费”"><a href="#关机时选择“停机不计费”" class="headerlink" title="关机时选择“停机不计费”"></a>关机时选择“停机不计费”</h3><p>阿里云真的是神奇的存在，在 ECS 管理界面，选择停机，竟然可以停机不收费！</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/28437c5fae934.png" alt="图片1.png"></p><p>实际上也不是完全不收费，硬盘和弹性公网 IP 仍然是收费的。但是，与停机后仍然保留CPU、内存相比，价格大幅降低。也就是说，我们在每天晚上，完全可以关机并选择不收费，可以节约一大笔。如果想要一直使用同一个 IP，可以选择绑定弹性公网 IP。</p><h3 id="依据个人需求选择实例规格"><a href="#依据个人需求选择实例规格" class="headerlink" title="依据个人需求选择实例规格"></a>依据个人需求选择实例规格</h3><p>我觉得，可能 8GB 内存已经够我用了，另外，青岛区的实例好像每小时能更便宜一毛钱……</p><h2 id="云桌面体验"><a href="#云桌面体验" class="headerlink" title="云桌面体验"></a>云桌面体验</h2><p>在体验之前，再确保一下：该实例网络安全组，需要放通 3389 端口（TCP 和 UDP 都要放通）。</p><p>打开本地的远程桌面客户端试试吧！</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/b4629c62b4373.png" alt="Snipaste_2020-02-09_18-38-25.png"></p><p>网络方面，我是江苏电信网络，连接上海区的 ECS，延迟很小，可以忽略，而且画质很清晰，暂时没有什么画面卡顿。至于下行网络，由于这是阿里云的专线，比家用运营商网络好太多，下载速度嗖嗖的，不管国内外。</p><p>计算性能方面，在我本地机器上，VSCode 的 Python 插件，进行一次文件错误扫描需要 5 秒左右，而这台云桌面，只要 1 秒。</p><p>操作系统方面，Windows Server 比 Windows PC 简洁很多，没有乱七八糟的服务，但也没有缺少日常开发所需的重要组件。可能会有点不一样，但是如果出问题，一般能很快解决。比如我在安装 Python 时出错，Google 一下便知要直接以管理员身份打开。</p><p>以下截图自我的云桌面。</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/d3b52ba297968.png" alt="Screenshot _1_.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/e9ae18b879037.png" alt="Screenshot _3_.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/9f2c0741b0057.png" alt="Screenshot _4_.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/8109324fabb58.png" alt="Screenshot _2_.png"></p><h3 id="提高体验的可选项"><a href="#提高体验的可选项" class="headerlink" title="提高体验的可选项"></a>提高体验的可选项</h3><ol><li>关闭 Windows 的过渡动画，这在远程桌面上会导致卡顿，且会消耗大量的流量费；</li><li>安全起见，重新创建一个管理员用户并禁用 Administrator 用户；</li><li>用好各种云同步功能，比如 Git 仓库、浏览器云同步、云盘等。</li></ol><h2 id="实测价格"><a href="#实测价格" class="headerlink" title="实测价格"></a>实测价格</h2><p>我正常使用了一天，晚上停机不收费，消费如下：</p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/176c67e7015fa.png" alt="Snipaste_2020-02-09_18-54-30.png"></p><p><img src="https://img.vvzero.com/blog/build-powerful-remote-desktops-with-aliyun-ECS-at-low-price/140f26bd1d962.png" alt="Snipaste_2020-02-09_18-55-07.png"></p><p>可见，我一天大致消费5元。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>确实不是很贵，可行性也很高。假如有模型渲染需求，甚至可以绑定个显卡（</p><p>抢占式实例也不是很可怕吧？我的实例目前没被回收。</p><p>另外，有人想跟我合租吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;要想读懂本文，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解阿里云等云服务的基本 WEB 界面操作；&lt;/li&gt;
&lt;li&gt;了解 Windows 操作系统的中阶操作；&lt;/li&gt;
&lt;li&gt;了解基础的软件开发术语。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Windows" scheme="https://blog.vvzero.com/tags/Windows/"/>
    
      <category term="阿里云" scheme="https://blog.vvzero.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="云桌面" scheme="https://blog.vvzero.com/tags/%E4%BA%91%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>为 Windows PowerShell 设置 User Alias （命令别名）</title>
    <link href="https://blog.vvzero.com/2019/07/22/set-user-alias-for-windows-PowerShell/"/>
    <id>https://blog.vvzero.com/2019/07/22/set-user-alias-for-windows-PowerShell/</id>
    <published>2019-07-22T11:56:20.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>直接看步骤的话，在最下方。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Windows Terminal 虽然还处于预览阶段，但是也出来很长一段时间了。它的历史使命，也许就是让原生 Windows 也能有一个像样的命令行环境。以前我一直在用 Cmder，但是 Cmder 的启动速度确实不敢恭维，而 Windows Terminal 启动确实很快。相比 Cmder， Windows Terminal 还缺少很多功能，不过以后应该很快也会补上。</p><img src="https://img.vvzero.com/blog/set-user-alias-for-windows-PowerShell/5d35bef29b3f1.png" style="zoom:50%;" /><p>我想尝试使用 Windows Termimal 进行开发。Windows Terminal 默认可以使用 <code>PowerShell</code>、<code>cmd</code>、<code>wsl bash</code>作为脚本工具。既然是在 Windows 环境下嘛，还是得尊敬一下 Windows PoweShell 的。初次使用，我觉得 PowerShell 跟 Cmder 用起来，最不方便的一点就是，我在 Cmder 里面设了很多的 Alias，也就是通过修改 <code>config/user_aliases.cmd</code> 写一串 <code>&lt;alia&gt;=&lt;xxx&gt; &lt;xxx&gt;</code> 来实现的。</p><img src="https://img.vvzero.com/blog/set-user-alias-for-windows-PowerShell/5d35bef29ad52.png" style="zoom:50%;" /><p>但是，PowerShell 如何实现命令的别名设置呢？</p><h2 id="探索过程及原理概述"><a href="#探索过程及原理概述" class="headerlink" title="探索过程及原理概述"></a>探索过程及原理概述</h2><p>如果搜索关键词 <code>windows powershell set user alias</code>，通常谷歌会给出<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/set-alias?view=powershell-6">微软官方文档</a>，但是这个文档只是告诉我们如何在脚本里面设置临时的别名，如果要设置永久别名，该怎么办？实际上，“别名”这种东西，也就是 <code>alias</code>，几乎所有的脚本语言，都没有所谓的“永久别名”(Permanent alias)，我们使用 Linux bash 、Cmder 之类的脚本工具，打开终端时，系统会默认执行一个脚本文件（ bash 是用户目录下的 <code>.bashrc</code>，Cmder 是 <code>config/user_aliases.cmd</code> ），而这样的脚本文件里，就包含了别名的定义。这也是为什么，我们在 Linux 类系统中，修改 <code>.bashrc</code> 后，必须要重新登出登录、或者 <code>source .bashrc</code> 的原因了。</p><p>所以，我们只要修改 Windows Powershell 启动时执行的文件就行了。很多论坛里面说，默认执行的脚本是 <code>$Home\Documents\profile.ps1</code> ，也就是 <code>C:\Users\你的用户名\Documents\profile.ps1</code> ，但是这并不正确，最好的方式是，先启动 PowerShell ，再执行 <code>echo $profile</code>，这样得到的文件路径，才是 PowerShell 的默认执行文件路径。</p><p><img src="https://img.vvzero.com/blog/set-user-alias-for-windows-PowerShell/5d35bef29d447.png"></p><p>然后，创建这个文件就好啦。</p><p>在文件里面，写上别名设置的语句。再一次注意，假如你的别名指代的命令含有空格，就不可以使用 <code>New-Alias</code> 命令，因为它不能带空格，即使你把指代的命令用引号括起来也没用。那怎么办呢？继续谷歌，原来，正确姿势是用 <code>function</code> ，也就是，我们把自己要定义的指令，定义为一个函数，就行啦。</p><img src="https://img.vvzero.com/blog/set-user-alias-for-windows-PowerShell/5d35bef339443.png" style="zoom: 67%;" /><p>保存文件，重新启动 PowerShell 以后，不出意外，应该会报一个 <code>File xxxxxxx\Microsoft.PowerShell_profile.ps1 cannot be loaded because running scripts is disabled on this system.</code> 根据<a href="https://tecadmin.net/powershell-running-scripts-is-disabled-system/">此链接</a>，出现这种情况，是因为 Windows 系统为了防止恶意脚本自动执行，故默认不允许自动运行脚本。所以，在确定自己有能力把控的情况下，__以管理员身份__，在 PowerShell 中执行 <code>Set-ExecutionPolicy RemoteSigned </code>，即可。</p><p>再次重启 PowerShell，应该可以发现，自定义别名已经生效了。</p><h2 id="步骤整理"><a href="#步骤整理" class="headerlink" title="步骤整理"></a>步骤整理</h2><p>如果你想为自己的 Windows PowerShell 设置永久的命令别名 (Alias)，可以遵循以下步骤：</p><ol><li><p>打开 PowerShell ，运行 <code>echo $profile</code>，会输出一个文件路径。创建这个文件。</p></li><li><p>打开刚创建的文件，按以下格式设置多条别名：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 别名</span> &#123; 需要替代的命令，可以包含空格 &#125;</span><br></pre></td></tr></table></figure></li><li><p>以管理员身份打开 PowerShell，执行 <code>Set-ExecutionPolicy RemoteSigned</code>。</p></li><li><p>重新启动 PowerShell ，应该已经完成了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;直接看步骤的话，在最下方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Windows Terminal 虽然还处于
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="Windows" scheme="https://blog.vvzero.com/tags/Windows/"/>
    
      <category term="PowerShell" scheme="https://blog.vvzero.com/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>20190523 随想</title>
    <link href="https://blog.vvzero.com/2019/05/23/thinking-in-20190523/"/>
    <id>https://blog.vvzero.com/2019/05/23/thinking-in-20190523/</id>
    <published>2019-05-23T13:10:30.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<p>四年之前，我高二的时候，一天傍晚放学，我跟当时教我化学的6老师（代称），开玩笑式地起了争执。6老师人很好，我们都跟他称兄道弟的。起因是，6老师向我们秀他新买的球鞋，很酷，是某个日本名牌。当时的我笑道：“日货啊，不能穿啊！”（当时的学生中间，这样的思想氛围还比较浓）。</p><p>6老师立刻就反驳了：“为什么不能穿？”“东西好用，为什么不买？”当时我还有一些现在看来可笑的话，都被6老师“讽刺”了一番。我仍不服气，要争辩，6老师对我说：“很多你看到的事情，并不一定是真的……是被修饰过的……”</p><p>我大致听懂了他的意思，但进一步问：“既然各种历史、事情都会被修饰，那么我们怎么才能知晓真实的情况呢？毕竟，不管哪一方说出的话，都有可能因为要符合其利益而将其修饰。”</p><p>6老师说：“要思考，学会思考！”</p><p>……</p><p>我当时不以为然，思考？怎么思考嘛！</p><p>后来我慢慢知道了，直到现在，我都很认可6老师，我觉得他很对。</p><p>不管是什么，都会被人修饰，只有自然科学不能被修饰。就像，不管是谁，也不能让人相信 1+1=3，这是数学。物理、化学等其他自然科学的原理，乃至经济学原理，都不能被修饰。</p><p>也许思考，就是要从自然科学立足吧？</p><p>就比如从数学逻辑里延申——任何事情都是有逻辑的，都应有前因后果。当一件事发生时，也许周围人都会讲述“这件事发生了”，可却鲜有人追溯，这件事为什么发生？当全社会都在为这件事痴狂，乃至要将这件事作为“原因”，采取行动（产生新的“结果”）时，还是没有多少人去关注这件事的根本原因、历史原因、直接原因之间的关系。然后，绝大多数人都被鼓动起来了，就像四年前的我，去笑6老师……</p><p>观察身边的各种变化，各种自然环境社会环境的变化，各种让人开心或难受或鄙夷的事，去思考，“为什么会这样？”</p><p>也许这就是所谓“理性”？</p><p>我不知道几百年前欧洲启蒙运动提倡的“理性”是否就是为了解决这样的问题。</p><p>“要思考，学会思考！”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;四年之前，我高二的时候，一天傍晚放学，我跟当时教我化学的6老师（代称），开玩笑式地起了争执。6老师人很好，我们都跟他称兄道弟的。起因是，6老师向我们秀他新买的球鞋，很酷，是某个日本名牌。当时的我笑道：“日货啊，不能穿啊！”（当时的学生中间，这样的思想氛围还比较浓）。&lt;/p&gt;
      
    
    </summary>
    
      <category term="LIVES" scheme="https://blog.vvzero.com/categories/LIVES/"/>
    
    
      <category term="高中" scheme="https://blog.vvzero.com/tags/%E9%AB%98%E4%B8%AD/"/>
    
      <category term="随想" scheme="https://blog.vvzero.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>免费使用 nuaa.portal 上网</title>
    <link href="https://blog.vvzero.com/2019/01/13/Use-the-Internet-via-nuaa-portal-for-free/"/>
    <id>https://blog.vvzero.com/2019/01/13/Use-the-Internet-via-nuaa-portal-for-free/</id>
    <published>2019-01-13T13:49:55.000Z</published>
    <updated>2022-01-17T08:39:56.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>学校赐予我的 nuaa.portal 账号在一个月之前就到期了，这一个月内，虽然对我的生活没有太大的影响，但是还是感受到了某些不便（总觉得某些东西有了更好，没有却不能拉倒）。前些天跟创新区内的同学讨论了本校的ipv6部署情况，突然就有兴致来折腾一下。</p><p>没错，免费上网还是有可能的。</p><h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><ul><li>学校的 nuaa.portal 公共无线网，Windows 电脑只要连接上，就能获取一个 ipv4 内网地址和一个 ipv6 地址。如果没有在指定 Web 页面上认证，则无法使用 ipv4 连接互联网。但是可以通过 ipv6 联网。</li><li>学校默认不分配 ipv6 的 DNS 服务器。</li><li>学校教学办公区有线宽带，经直接拨号，同样可以获得一个 ipv4 内网地址和一个 ipv6 地址，均可以访问互联网。</li></ul><h2 id="一步步的尝试"><a href="#一步步的尝试" class="headerlink" title="一步步的尝试"></a>一步步的尝试</h2><h3 id="直接用-ipv6-上提供-ipv6-服务的网站"><a href="#直接用-ipv6-上提供-ipv6-服务的网站" class="headerlink" title="直接用 ipv6 上提供 ipv6 服务的网站"></a>直接用 ipv6 上提供 ipv6 服务的网站</h3><p>既然可以从 nuaa.portal 获取可以访问互联网的 ipv6 地址，那么最简单的思路，就是直接使用这条通道。但是，由于学校没有 ipv6 的 DNS（认证后，如果访问 ipv6 站点，其实仍然是使用 ipv4 的 DNS 服务器），故必须配置 ipv6 的 DNS。这一点很简单，直接修改 DNS 服务器即可：</p><p><img src="https://img.vvzero.com/blog/Use-the-Internet-via-nuaa-portal-for-free/2.png"></p><p>这里推荐两个 ipv6 的 DNS 服务器，一个是 Google 家的，一个是清华大学 TUNA 协会的：</p><ul><li><code>2001:4860:4860::8888</code></li><li><code>2001:da8::666</code></li></ul><p>然后，实测就可以访问提供 ipv6 服务的网站啦！</p><p>比如：</p><ul><li>google.com.hk</li><li><a href="http://www.youtube.com/">www.youtube.com</a></li><li>ipv6.baidu.com</li><li>ipv6.mirrors.ustc.edu.cn</li></ul><h3 id="使用-ipv6-代理服务器进行无限制的互联网访问"><a href="#使用-ipv6-代理服务器进行无限制的互联网访问" class="headerlink" title="使用 ipv6 代理服务器进行无限制的互联网访问"></a>使用 ipv6 代理服务器进行无限制的互联网访问</h3><p>上一条方法虽然简单，但是只能访问提供 ipv6 的网站，然而现在国内乃至国际上大多数网站并没有提供 ipv6 服务，至少，你目前还不能登微信。</p><p>但是，如果有一个同时具有有 ipv6 和 ipv4 的代理服务器，不就一切都解决了吗？把本地的所有流量都通过 ipv6 转发至代理服务器，然后就可以访问任意站点了！</p><p>这里，我借用了 Shadowsocks，配置了一台有 ipv6 和 ipv4 的服务器，然后本地开启全局代理，实际就可以访问任意站点了。</p><p>使用这个方法，本地 DNS 甚至都不需要配置。</p><h3 id="终极（硬核）蹭网方案"><a href="#终极（硬核）蹭网方案" class="headerlink" title="终极（硬核）蹭网方案"></a>终极（硬核）蹭网方案</h3><p>还记得一开始我说过，教学办公区也能获得 ipv6 地址吗？</p><p>对，我就是想用远程桌面！</p><p><img src="https://img.vvzero.com/blog/Use-the-Internet-via-nuaa-portal-for-free/1.jpg"></p><p>我在学校创新区日常开着一台机器，拨号联网，（性能还不错）。</p><p>emmm，其实这个方法真的很硬核很有效，而且，由于 nuaa.portal 和教学办公区实际属于同一个大的内网环境，学校的路由器还不错，实测 ping 延迟只有 2ms，完全满足了日常电脑使用（除了不能使用显卡玩游戏什么的）。微软家的远程桌面还是很强大的！</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我其实还是想再来一年的免费 nuaa.portal 账号的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;学校赐予我的 nuaa.portal 账号在一个月之前就到期了，这一个月内，虽然对我的生活没有太大的影响，但是还是感受到了某些不便（总觉得某
      
    
    </summary>
    
      <category term="TECHNOLOGY" scheme="https://blog.vvzero.com/categories/TECHNOLOGY/"/>
    
    
      <category term="NUAA" scheme="https://blog.vvzero.com/tags/NUAA/"/>
    
      <category term="ipv6" scheme="https://blog.vvzero.com/tags/ipv6/"/>
    
  </entry>
  
  <entry>
    <title>长令记事：暑期读书分享</title>
    <link href="https://blog.vvzero.com/2018/12/03/channy-s-summer-holiday-reading/"/>
    <id>https://blog.vvzero.com/2018/12/03/channy-s-summer-holiday-reading/</id>
    <published>2018-12-03T11:50:07.000Z</published>
    <updated>2022-01-17T08:39:56.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现在还谈暑假？"><a href="#现在还谈暑假？" class="headerlink" title="现在还谈暑假？"></a>现在还谈暑假？</h2><p>是的吧，主要是玲玲的暑期读书分享前几天才发出来嘛~</p><p>我常常说，我的知识深度不行，但是知识广度还可以，但有的时候，被问起文学、现代文化等领域的时候，总是很惭愧，因为我实在没有读过几本书。要是现在有人问我“你最喜欢的一本文学小说是什么”，我恐怕脑中首先闪过的还是让人贻笑大方的《西游记》等。</p><p>好在玲玲完全填补了我的空缺……</p><h2 id="长令的暑期读书分享"><a href="#长令的暑期读书分享" class="headerlink" title="长令的暑期读书分享"></a>长令的暑期读书分享</h2><p>我想了想，还是不要把她发在公众号的文章copy&amp;paste了，我的排版也不好看。就直接上链接吧：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODQ4OTcyOQ==&mid=2247483830&idx=1&sn=ff12dec368c05d5ce8d14286cda9316a&chksm=fddab4d8caad3dce3c0d2b65d2042fb8160ac9f507895dce907106db240d175ddbd02fe5a394&mpshare=1&scene=1&srcid=12033TBv55Hra7Uoozvqe8AL#rd">暑期读书分享（上）</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODQ4OTcyOQ==&mid=2247483836&idx=1&sn=8bb8d5aa143d0cf3eed20c17b4b84d98&chksm=fddab4d2caad3dc439156cd41a2281e9a825e441d3a4fb368a069ac99aec298baa03a1d1d48e&mpshare=1&scene=1&srcid=12034PasL8Rzdu5maek0CvVm#rd">暑期读书分享（下）</a></p><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p><img src="https://source.vvzero.com/channy_wechat_official_account.jpg" alt="&quot;长令记事&quot;公众号二维码"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现在还谈暑假？&quot;&gt;&lt;a href=&quot;#现在还谈暑假？&quot; class=&quot;headerlink&quot; title=&quot;现在还谈暑假？&quot;&gt;&lt;/a&gt;现在还谈暑假？&lt;/h2&gt;&lt;p&gt;是的吧，主要是玲玲的暑期读书分享前几天才发出来嘛~&lt;/p&gt;
&lt;p&gt;我常常说，我的知识深度不行，但是知
      
    
    </summary>
    
      <category term="CHANNY" scheme="https://blog.vvzero.com/categories/CHANNY/"/>
    
    
      <category term="长令记事" scheme="https://blog.vvzero.com/tags/%E9%95%BF%E4%BB%A4%E8%AE%B0%E4%BA%8B/"/>
    
  </entry>
  
</feed>
